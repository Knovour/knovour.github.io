<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Knovour Notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://notes.knovour.ninja/"/>
  <updated>2017-01-21T16:53:45.882Z</updated>
  <id>https://notes.knovour.ninja/</id>
  
  <author>
    <name>Knovour Zheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>摸索 Elm</title>
    <link href="https://notes.knovour.ninja/2017/01/21/elm-practice/"/>
    <id>https://notes.knovour.ninja/2017/01/21/elm-practice/</id>
    <published>2017-01-21T13:50:05.000Z</published>
    <updated>2017-01-21T16:53:45.882Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子在考慮摸索 Elm，剛好在那時候也在找當季蔬果的資料，後來想想，乾脆用這些資料來當作摸索的題材，於是這<a href="https://notes.knovour.ninja/food/">網站</a>就誕生了，以下來大概講一下感想。</p>
<ul>
<li><a href="https://notes.knovour.ninja/food/">當季蔬果一覽</a></li>
<li><a href="https://github.com/Knovour/food" target="_blank" rel="external">GitHub</a></li>
</ul>
<h2 id="選-Elm-的原因"><a href="#選-Elm-的原因" class="headerlink" title="選 Elm 的原因"></a>選 Elm 的原因</h2><p>很大一部份其實是逃避現實，由於 JavaScript 的 framework 跟 library 大量出現，而且不僅是前後端，還延伸到桌面軟體、APP 甚至是 IoT 上。以前只是將 ES6 轉成 ES5 的 Babel，現在除了將可能會有的 ECMAScript 語法轉換以外，還可以讓 JS 支援一些不存在的語法（比如 Flow），再配上 webpack 還可以進一步定義更深的語法結構，雖然不是說非得全包全學不可，但五花八門的輪子不斷冒出，當下感覺是非常的吃不消。</p>
<p>當時摸的是 React，雖然我個人挺喜歡這 framework，但 JSX 語法我很討厭，加上圍繞著 React 衍生的各種 library，輕則只是加點功能，重則有如在這之上又加了自創的語法一般，導致整個檔案看起來就像是三四種語言或語法風格的大雜燴，但不得不說，React 生態系真的把 JS 玩得很溜，比如 <a href="https://github.com/styled-components/styled-components" target="_blank" rel="external">styled-components</a> 又是一絕，但又要多塞一種風格在裡面我得考慮考慮。</p>
<p>原本下一個想碰的是 <a href="https://cycle.js.org/" target="_blank" rel="external">Cycle.js</a>，但後來想想，Redux 跟 <a href="https://cycle.js.org/" target="_blank" rel="external">Cycle.js</a> 都有跟 Elm 借鑒一些東西，加上繼 Redux 出現之後，Elm 被關注的程度似乎有上升的趨勢，不如就直接學 Elm 看看，而這也是我第一個學的轉 JS 的語言。</p>
<a id="more"></a>
<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>除了剛開始完全不知道怎麼下手外，整體寫起來的感受還算是不錯的，一開始讓我最欣賞的就是程式的引入方式，免去了引入時要寫 <code>../../</code> 之類相對路徑的麻煩。</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Components/Header.elm</span></div><div class="line"><span class="keyword">module</span> Components.Header <span class="keyword">exposing</span> (..)</div></pre></td></tr></table></figure>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Somewhere else</span></div><div class="line"><span class="keyword">import</span> Components.Header <span class="keyword">exposing</span> (..)</div></pre></td></tr></table></figure>
<p>Pipeline 似乎是大部分函數式語言都會有的東西，不過第一次使用時是覺得也是挺有趣的部份，避免掉小括號連包的情況。在 JS 底下類似鏈式寫法，只是某些地方可能得再自己寫個 prototype 接起來或是直接用 lodash 之類的比較快。</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">num</span> = <span class="number">1</span></div><div class="line"><span class="title">multiply</span>(<span class="number">4</span>, add(<span class="number">1</span>, num))</div></pre></td></tr></table></figure>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Same as</span></div><div class="line"><span class="title">num</span></div><div class="line">  |&gt; add <span class="number">1</span></div><div class="line">  |&gt; multiply <span class="number">4</span></div></pre></td></tr></table></figure>
<p>Elm 既是一門語言，也是一個 framework，所以建立 HTML 的部份也不會顯得突兀，這部份也是 <a href="https://cycle.js.org/" target="_blank" rel="external">Cycle.js</a> 參考的地方，跟 JSX 比起來，也比較不會有那種 JS 跟 XML 塞在一起充滿嚴重違和感的感覺。</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="title">div</span> [ class <span class="string">"search-bar"</span> ]</div><div class="line">  [ label [ class <span class="string">"label material-icons"</span>, for <span class="string">"search"</span> ] [ text <span class="string">"search"</span> ]</div><div class="line">  , input</div><div class="line">    [ id <span class="string">"search"</span></div><div class="line">    , type_ "search"</div><div class="line">    , name <span class="string">"search"</span></div><div class="line">    , placeholder <span class="string">"Search..."</span></div><div class="line">    , onInput (\value -&gt; <span class="type">SearchMsg</span> &lt;| <span class="type">Name</span> value)</div><div class="line">    ] []</div><div class="line">  ]</div></pre></td></tr></table></figure>
<p>而 Redux 則是參考了 Elm 的事件處理方式，也就是 <a href="https://guide.elm-lang.org/architecture/" target="_blank" rel="external">The Elm Architecture</a> 的部份。</p>
<h2 id="一些困擾的地方"><a href="#一些困擾的地方" class="headerlink" title="一些困擾的地方"></a>一些困擾的地方</h2><h4 id="額外的-library-太少，或沒跟上新的版本"><a href="#額外的-library-太少，或沒跟上新的版本" class="headerlink" title="額外的 library 太少，或沒跟上新的版本"></a>額外的 library 太少，或沒跟上新的版本</h4><p>這大概是冷門語言最現實的地方，當初想找個線上資料庫之類的服務把當季蔬果的資訊存進去，本來找了 Firebase，但相對應的 <a href="https://github.com/ThomasWeiser/elmfire" target="_blank" rel="external">elmfire</a> 卻是卡在支援 Elm 0.16 版遲遲未更新。之後想改找 GraphQL 的服務，但 <a href="https://github.com/jahewson/elm-graphql" target="_blank" rel="external">elm-graphql</a> 不管試了幾個服務都沒法接上。由於希望能先把網站做出來，所以後來直接丟 <a href="https://www.contentful.com/" target="_blank" rel="external">Contentful CMS</a> 用直接 call 網址的方式取資料。</p>
<h4 id="View-自訂-component-時，語法風格沒法統一"><a href="#View-自訂-component-時，語法風格沒法統一" class="headerlink" title="View 自訂 component 時，語法風格沒法統一"></a>View 自訂 component 時，語法風格沒法統一</h4><p>我在寫 React 時都盡量讓 XML 的區域只出現 XML，而不是中間又插個 JS 搞得更不倫不類，而 Vue 已經把兩個分開，所以不太需要擔心這種事，但 Elm 的一個標籤兩個陣列的寫法我反而很難配合寫出一樣的銜接 component 的方式。</p>
<p>如果只是單純的資料傳遞還算勉強有方法，但加上事件處理流程後就很難這樣辦了。</p>
<h4 id="沒有-null"><a href="#沒有-null" class="headerlink" title="沒有 null"></a>沒有 null</h4><p>有些語言回傳空值是沒在用 null 的，取而代之的是用額外的 package（Elm 是取名叫 <code>Result</code>）再包裝一遍，然後再把值取出來。這事已經在 Rust 見試過一次了，雖不討厭但還沒適應這寫法就是。</p>
<h4 id="一點點觀感問題"><a href="#一點點觀感問題" class="headerlink" title="一點點觀感問題"></a>一點點觀感問題</h4><p><strong>這問題其實在 0.18 被拿掉了，由於我是從 0.17 開始接觸，所以還是想挖出來吐槽一下</strong></p>
<p>拿 <code>String.contains</code> 這個 function 來舉例（後面會把 String 省略），這個功能跟 JS 的 includes 一樣。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// JavaScript</span></div><div class="line"><span class="string">'Make America Great Again!'</span>.includes(<span class="string">'Great'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">contains</span> <span class="string">"Great"</span> <span class="string">"Make America Great Again!"</span></div></pre></td></tr></table></figure>
<p>在 0.17 可以把 function 塞在兩個變數之間，變成：</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 0.17</span></div><div class="line"><span class="string">"Great"</span> `contains` <span class="string">"Make America Great Again!"</span></div></pre></td></tr></table></figure>
<p>這看起來就好像把 JS 版本的呼叫方式的兩個變數前後互換一樣，看起來非常的怪，但這功能在 0.18 被拿掉了，一律改用 pipeline 的方式代替。</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 0.18</span></div><div class="line"><span class="string">"Make America Great Again!"</span> |&gt; contains <span class="string">"Great"</span></div></pre></td></tr></table></figure>
<p>雖然多了個箭頭，但至少順眼一些。</p>
<h2 id="後話"><a href="#後話" class="headerlink" title="後話"></a>後話</h2><p>Elm 會不會變流行？我覺得不會，畢竟 JS 的生態圈裡不只 framework 跟 library 氾濫，連可以轉成 JS 的語言數量也氾濫無比，隨著 ES6 正式上線，以及後續的新語法開始規劃支援後，選用非 JS 的語言再轉換這件事就更沒有必要了，更何況那一票 framework 也是都要用自己的 webpack loader 做轉換才能動了！</p>
<p>但如果 <a href="http://webassembly.org/" target="_blank" rel="external">WebAssembly</a> 開始正式推行的話，或許會有不一樣的氣象也說不定，我想到時除了為了寫遊戲而使用 <a href="http://webassembly.org/" target="_blank" rel="external">WebAssembly</a> 的語言外，像 Elm 這種獨立語言 + framework 的語言也會跟著變多吧！</p>
<p>至少我不太會想拿來寫第二個網站就是…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前陣子在考慮摸索 Elm，剛好在那時候也在找當季蔬果的資料，後來想想，乾脆用這些資料來當作摸索的題材，於是這&lt;a href=&quot;https://notes.knovour.ninja/food/&quot;&gt;網站&lt;/a&gt;就誕生了，以下來大概講一下感想。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://notes.knovour.ninja/food/&quot;&gt;當季蔬果一覽&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Knovour/food&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;選-Elm-的原因&quot;&gt;&lt;a href=&quot;#選-Elm-的原因&quot; class=&quot;headerlink&quot; title=&quot;選 Elm 的原因&quot;&gt;&lt;/a&gt;選 Elm 的原因&lt;/h2&gt;&lt;p&gt;很大一部份其實是逃避現實，由於 JavaScript 的 framework 跟 library 大量出現，而且不僅是前後端，還延伸到桌面軟體、APP 甚至是 IoT 上。以前只是將 ES6 轉成 ES5 的 Babel，現在除了將可能會有的 ECMAScript 語法轉換以外，還可以讓 JS 支援一些不存在的語法（比如 Flow），再配上 webpack 還可以進一步定義更深的語法結構，雖然不是說非得全包全學不可，但五花八門的輪子不斷冒出，當下感覺是非常的吃不消。&lt;/p&gt;
&lt;p&gt;當時摸的是 React，雖然我個人挺喜歡這 framework，但 JSX 語法我很討厭，加上圍繞著 React 衍生的各種 library，輕則只是加點功能，重則有如在這之上又加了自創的語法一般，導致整個檔案看起來就像是三四種語言或語法風格的大雜燴，但不得不說，React 生態系真的把 JS 玩得很溜，比如 &lt;a href=&quot;https://github.com/styled-components/styled-components&quot;&gt;styled-components&lt;/a&gt; 又是一絕，但又要多塞一種風格在裡面我得考慮考慮。&lt;/p&gt;
&lt;p&gt;原本下一個想碰的是 &lt;a href=&quot;https://cycle.js.org/&quot;&gt;Cycle.js&lt;/a&gt;，但後來想想，Redux 跟 &lt;a href=&quot;https://cycle.js.org/&quot;&gt;Cycle.js&lt;/a&gt; 都有跟 Elm 借鑒一些東西，加上繼 Redux 出現之後，Elm 被關注的程度似乎有上升的趨勢，不如就直接學 Elm 看看，而這也是我第一個學的轉 JS 的語言。&lt;/p&gt;
    
    </summary>
    
    
      <category term="elm" scheme="https://notes.knovour.ninja/tags/elm/"/>
    
  </entry>
  
  <entry>
    <title>這幾年使用 Linux 當一般作業系統的感受</title>
    <link href="https://notes.knovour.ninja/2016/07/08/years-of-using-linux/"/>
    <id>https://notes.knovour.ninja/2016/07/08/years-of-using-linux/</id>
    <published>2016-07-08T04:19:39.000Z</published>
    <updated>2016-08-16T17:15:05.638Z</updated>
    
    <content type="html"><![CDATA[<p>上圖是我的 Linux 現在的樣子：</p>
<ul>
<li>發行版：<a href="https://manjaro.github.io/" target="_blank" rel="external">Manjaro Linux</a></li>
<li>桌面環境：KDE 5 Plasma</li>
<li>佈景：Maia Theme</li>
</ul>
<p>Linux 在我大學期間就開始嘗試拿來作為一般的作業系統使用，但那段期間其實一直都在 Windows 跟 Linux 之間切換（你知道的，遊戲），後來這兩年開始固定用 Linux，工作時用 Mac，基本上已經沒怎麼碰 Windows 了。</p>
<p>當然，這個過程並沒有讓我成為什麼 Linux 大師，我也沒有這個打算，只是嘗試能在日常生活中使用而已。前一陣子看到<a href="https://lex.sh/linux10khrs/" target="_blank" rel="external">這篇文章</a>後覺得很有趣，於是決定也來寫篇自己的經歷以及感受。以下我會將這篇文章分成數個大項目來做探討。</p>
<p>裏面一些資訊可能與印象有所不同，請見諒。</p>
<a id="more"></a>
<h2 id="作業系統"><a href="#作業系統" class="headerlink" title="作業系統"></a>作業系統</h2><p>我第一個用的 Linux 發行版是 Ubuntu 7.10，當時 <a href="http://www.compiz.org/" target="_blank" rel="external">Compiz Fusion</a> 這個桌面特效大補帖的相關影片出現時小紅了一陣子，我也是在那時候知道 Linux 以及其中的 Ubuntu。我已經忘記當時看到的影片是哪個了，不過就是如下面的影片所呈現的那樣。</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/4QokOwvPxrE" frameborder="0" allowfullscreen></iframe></div>
<p>那段期間打開 Ubuntu 之後，也不過就是玩一玩特效、隨便打幾個指令、開 Firefox 晃一下就切回去玩遊戲了，沒辦法，這就是 Windows 最大的優勢。</p>
<p>到大二的時候，原本的電腦寄回老家，我再另外買一台基本配備的套裝主機，那時候 Vista 剛推出，而我也不疑有他直接用預設的。</p>
<p><strong>誰知道這正是噩夢的開始。</strong></p>
<p>當時那台主機記憶體只有 1GB，但光 Vista 本身居然就吃了 70% ~ 80% 的記憶體，隨便晃個滑鼠、開個視窗，記憶體要過 90% 都不是問題。在這情況下，這作業系統根本是沒辦法用的，不只吃記憶體，而且極端的不穩定，雖然後來多插了記憶體以及幾次系統更新後症狀逐漸減輕，但從那時候開始，我在空閒時折騰 Ubuntu 的次數反而大幅增加了。</p>
<p>比起 Vista，Ubuntu 裝上之後記憶體只吃了 20% ~ 30% 左右，開特效也沒有什麼大問題，但自從 8.04、8.10 版本推出之後，問題也開始多了。我還蠻執著於軟體什麼都要到最新版才行，所以新版本推出之後我也就升級了，但版本上到 8 之後，一切都不那麼美好了。半年一次的版本升級基本上就是個災難，直接升級的後果會讓 Ubuntu 有一堆奇奇怪怪的問題，與其花時間找方法解決這些問題，直接用新版重灌取代升級反而是最好的方法；當然，如果只要半年重灌一次就可以解決那到還好，怎樣都不會比我重灌 Vista 的次數多。但 Ubuntu 的軟體、library 版本不上不下，也稱不上穩定，在系統更新個幾次之後又開始有奇怪的問題了。</p>
<p>那時 Ubuntu 給我的感受是：<strong>我有的問題別人不一定有，別人有的問題我基本上都會有，但別人提供的解決方式起碼有一半在我這邊行不通。</strong></p>
<p>拜這所賜，當時我覺得我的 Google 搜尋能力得到了提升，而主打一般人也能使用的 Linux 反而變得很常與指令、系統 config 打交道。所以想學好 Linux 基礎的話，去被 Ubuntu 惡整搞不好是最快的方式，這是我折騰到後面的感想。也因為如此，在我心目中最穩定的 Ubuntu 版本是 7.10（當然我也不算是很頻繁的用他），而在架伺服器時，我通常會先考慮 <a href="https://www.centos.org/" target="_blank" rel="external">CentOS</a> 或 <a href="https://www.scientificlinux.org/" target="_blank" rel="external">Scientific Linux</a>，Ubuntu Server 反而不會是我優先考慮的發行版。</p>
<p>後來有次在 Ubuntu 上當一次機之後，每重開機一次就有某個系統設定或某個軟體設定被初始化，重開越多次，就會越像系統剛裝好的樣子。在那場悲劇之後，一怒之下我就跳槽到 <a href="https://www.archlinux.org/" target="_blank" rel="external">ArchLinux</a> 了。</p>
<p><img src="http://i.imgur.com/g130C.jpg" alt="在此掛上 8.10 的桌布來紀念那段日子（這也是歷來 Ubuntu 版本裡，我最喜歡的預設桌布）"></p>
<p>當時看到這篇 <a href="http://antimalicious.blogspot.tw/2009/04/archlinux.html" target="_blank" rel="external">ArchLinux 推廣教學文</a>時就一直考慮要換，看了幾次教學文以及搜尋其他教學文章跟 VM 練習之後才下定了決心。要知道，那時候智慧型手機還沒有推出，手機上網也是件不容易的事，所以當時我把過程抄在紙上後，燒了光碟就開始弄了。當時的安裝過程就跟那篇推廣文的內容差不多，有基本的引導流程，所以沒有很大的麻煩（其實我不小心把 D 槽給格式化了）。</p>
<p><a href="https://www.archlinux.org/" target="_blank" rel="external">ArchLinux</a> 裝完後問題其實也不少，但有很完整的 Wiki 在，基本上都是可以解決的事，就算要額外搜尋，也不太會有別人的解決方式我行不通的情形發生，雖然安裝過程麻煩了一些，但重灌的次數少了非常多。話雖如此，<a href="https://www.archlinux.org/" target="_blank" rel="external">ArchLinux</a> 的開發者卻覺得應該要提高安裝的難度，所以新版連基本的安裝導引都拿掉了，你得從頭到尾打指令才行。</p>
<p>第一次重灌時覺得算了，反正久久才會重灌一次，等到那個「久久」的時刻真的來臨時，我反而沒什麼耐心再搞安裝了。在這之前有搜尋過 <a href="https://www.archlinux.org/" target="_blank" rel="external">ArchLinux</a> 的衍生版，其中 <a href="https://chakralinux.org/" target="_blank" rel="external">Chakra</a> 以及 <a href="https://manjaro.github.io/" target="_blank" rel="external">Manjaro Linux</a> 是比較常看到有在討論的，安裝上也比較方便，在試了幾次 <a href="https://chakralinux.org/" target="_blank" rel="external">Chakra</a> 都無法安裝成功後，我選擇了後者直到現在。</p>
<h2 id="桌面環境"><a href="#桌面環境" class="headerlink" title="桌面環境"></a>桌面環境</h2><p>Linux 的桌面環境基本上就是 Gnome 跟 KDE 這兩個為大宗，前者基於 GTK，後者基於 Qt，一個是以 Mac 桌面環境為參考，一個是以 Windows 為參考；在版本前進到 Gnome 3 以及 KDE 4 之後，兩者都開始走出屬於自己的路了。</p>
<p>當時 Ubuntu 是以 Gnome 2 為預設環境，8.10 以前是以淺色為基調</p>
<p><img src="http://i1-linux.softpedia-static.com/screenshots/Ubuntu-Gutsy-Gibbon_1.jpg" alt="來源：Softpedia"></p>
<p>基本上看起來就是很無聊的樣子，到 9.04 時換成深色佈景，質感提升了不少。</p>
<p><img src="http://news.softpedia.com/images/extra/LINUX/large/ubuntu904released-large_001.jpg" alt="來源：Softpedia"></p>
<p>但對我來說他還是有個問題 ― 他很好看，但不耐看，看了差不多三個月之後就看膩了。在那段期間，除了折騰系統上的問題之外，我還深深陷入了更換佈景及調整桌面配置的過程中；只要在 RSS 上看到有什麼 Gnome 佈景推荐的文章，或是像 <a href="https://www.gnome-look.org" target="_blank" rel="external">GNOME-LOOK.ORG</a> 之類的網站看有什麼不錯的佈景，我就會抓下來試一試。</p>
<p>這些佈景在試用後的感想是：<strong>深色系的普遍都不好看也不耐看，淺色系的有些雖不好看但還算耐看。</strong></p>
<p>而那時在我的作業系統上留最久的佈景應該是 <a href="https://www.gnome-look.org/content/show.php/Bamboo+Zen?content=85860" target="_blank" rel="external">Bamboo Zen</a>。</p>
<p><img src="https://cn.pling.com/img//hive/content-pre2/85860-2.jpg" alt="來源：GNOME-LOOK.ORG"></p>
<p>當時有一部份 Gnome 的淺色系佈景很喜歡打上一種噱頭：<strong>像 Mac 一樣</strong>。我不懂為什麼很多人想要讓作業系統看起來「像 Mac 一樣」，但他真的發生了。他們把色彩調成淺銀色或銀白色，加上點光澤，換掉圖標（我覺得在這當中最可憐的是 Firefox，因為他常被迫換上 Safari 的圖標），一個 Mac Like 介面就誕生了。在這段期間，最嚴重的莫過於誕生了 Pear OS 這個發行版。</p>
<p><img src="http://i1-news.softpedia-static.com/images/news2/Pear-OS-Is-Making-a-Comeback-Rumor-468670-3.jpg" alt="來源：Softpedia"></p>
<p>不論這些<strong>像 Mac 一樣</strong>的佈景有多麼強調這件事，他們唯一不會跟你講的就是：「當你裝好之後，切記！盯著桌面看就好，不要做任何事，不要打開任何東西。」，因為隨便點開一個視窗就徹底破功了。這種事在 Android 上也在發生，只是模仿對象變成了 iOS。</p>
<p>不過 Pear OS 已經收掉了，目前的 Mac Like 發行版變成 <a href="https://sourceforge.net/projects/gmaclinux/" target="_blank" rel="external">GMac Linux</a>。</p>
<p><img src="https://a.fsdn.com/con/app/proj/gmaclinux/screenshots/Screenshot%20from%202016-04-30%2014:30:55.png" alt=""></p>
<p>至於 Ubuntu 自己的 <a href="https://unity.ubuntu.com/" target="_blank" rel="external">Unity</a> 介面我就不知道要說啥了…</p>
<p>鏡頭切到 KDE 這邊，當時 KDE 3 我覺得沒什麼特色，完全沒有想用的慾望；但是當 KDE 4 推出之後，整個感受都不一樣了，不僅好看，而且耐看。在那之後推出的 Windows 7 更被調侃是「抄襲 KDE 4」，而後來 KDE 也很不客氣的把 Windows 7 上一些特色給抄了過來（比如拖拉標題到邊邊讓他佔半個螢幕）。所以在我跳槽到 <a href="https://www.archlinux.org/" target="_blank" rel="external">ArchLinux</a> 時，我也改用 KDE 作為我的桌面環境。</p>
<p><img src="http://pic.pimg.tw/qwert535286/4b30ae36828b3.jpg" alt="這是當時的樣子：ArchLinux + KDE 4"></p>
<p>KDE 好看歸好看，但還是得說，他從來沒有穩定過。並不是說用到一半就會全面崩潰之類的（早期倒是很頻繁），但總是會東壞一點西壞一點，雖不影響正常使用，但總是有疙瘩。</p>
<p>後來 KDE 5 Plasma 推出，整體而言又更上了一層，但還是一樣，他從來沒有真正穩定過，至少現在問題已經少非常多了。</p>
<p><img src="https://c2.staticflickr.com/8/7788/28077094630_326e5dd9b8_o.png" alt="這是 KDE 5 Plasma 的預設佈景"></p>
<p>有一個主打 Material Design 的桌面環境 <a href="http://papyros.io/" target="_blank" rel="external">Papyros</a> 還在開發中，等穩定的時候再來試試看。</p>
<p><img src="https://i.ytimg.com/vi/6XSyBV0h2n4/maxresdefault.jpg" alt="來源：YouTube"></p>
<p>題外話：如果想要找個節省資源的桌面環境，比起 <a href="http://www.xfce.org/" target="_blank" rel="external">Xfce</a>，我會比較推荐 <a href="http://lxqt.org/" target="_blank" rel="external">LXQt</a>，至於其他一些比較硬派的桌面環境，我的興趣就不大了。</p>
<h2 id="開發工具"><a href="#開發工具" class="headerlink" title="開發工具"></a>開發工具</h2><p>一開始把玩過一下 <a href="https://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a>，後來在 <a href="http://www.vim.org/" target="_blank" rel="external">Vim</a> 上使用了一段不算短的時間，然而最終我還是沒能掌握那一堆快捷鍵以及指令的精髓，要是逼我使用 60% 鍵盤，我大概會瘋掉。那時大學時學的語言還是以 Java 為主，所以 Eclipse 等 IDE 還是比較常使用的，曾經看過一名同學在 Eclipse 上用快捷鍵用得嚇嚇叫，讓我十分佩服，雖然最後他被當了。</p>
<p>工作之後開始使用 Mac 跟 <a href="https://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a>，在開發 web 挺方便，缺點是在 Linux 底下無法打中文，不管打什麼補丁、用什麼方法都不管用，不過當時也沒有比較好的替代品，所以在 Linux 底下還是只能將就。之後 <a href="https://atom.io/" target="_blank" rel="external">Atom</a> 推出 Beta 測試，不算上他用起來像 Alpha 這件事，光是能好好打中文就謝天謝地了，在推出測試之後就立馬換上。再之後推出正式版時，<a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a> 推出了，這編輯器在使用上感覺比 <a href="https://atom.io/" target="_blank" rel="external">Atom</a> 舒服不少，所以在試用一陣子之後就又換了。將來會不會又想跳哪個編輯器我也不知道，不過 <a href="http://spacemacs.org/" target="_blank" rel="external">Spacemacs</a> 頗讓我感興趣的，前提是我有沒有心想記那一堆快捷鍵…</p>
<p><img src="http://i.imgur.com/hTIXoZe.png" alt=""></p>
<h2 id="硬體支援"><a href="#硬體支援" class="headerlink" title="硬體支援"></a>硬體支援</h2><p>顯卡就是挑 NVIDIA，驅動在 Linux 上的支援度比 AMD 好太多太多了。一些小東西比如無線網卡之類的，不要挑功能太多或看起來好像很高檔的，不然就算有幸找到支援的驅動，在抓取硬體時很可能也會是這次有抓到，但下次就不一定了。</p>
<h2 id="軟體"><a href="#軟體" class="headerlink" title="軟體"></a>軟體</h2><p>如同 Gnome 與 KDE 之爭一樣，軟體開發的 GUI Library 也是以 GTK 跟 Qt 為主流，少部份會用 Tcl/Tk 之類的東西。不過不論是用哪種 Library，最困難的一點莫過於跨平台這件事，基本上有跨平台又好用的軟體少之又少，而在跨平台之中，每個都能有一樣的使用體驗更是難上加難。</p>
<p>一些像 <a href="https://krita.org" target="_blank" rel="external">Krita</a>、<a href="https://www.blender.org/" target="_blank" rel="external">Blender</a> 跟 <a href="https://zh-tw.libreoffice.org/" target="_blank" rel="external">LibreOffice</a> 之類的軟體都能在三個作業系統上有不錯的體驗，而 <a href="https://www.gimp.org/" target="_blank" rel="external">GIMP</a>、<a href="http://mypaint.org/" target="_blank" rel="external">MyPaint</a> 在 Windows 及 Mac 平台上有時會因為編譯問題而延遲發佈，穩定性也稍微低一點，至於 <a href="https://inkscape.org/" target="_blank" rel="external">Inkscape</a>…他連在 Linux 上都不一定穩定了。誠心建議，如果想在非 Linux 平台使用 <a href="https://www.gimp.org/" target="_blank" rel="external">GIMP</a> 跟 <a href="https://inkscape.org/" target="_blank" rel="external">Inkscape</a> 的話，可到<a href="http://www.partha.com/" target="_blank" rel="external">這個網站</a>下載另外編譯打包好的版本，執行起來相對穩定許多。</p>
<p>而有些企業會突然宣佈產品支援 Linux，比如 <a href="http://www.xaraxtreme.org/" target="_blank" rel="external">Xara Xtreme</a>，在宣佈支援的時候可是歡騰了一小陣子，畢竟除了 <a href="https://inkscape.org/" target="_blank" rel="external">Inkscape</a> 外沒有什麼強大的替代品可供挑選，然而在更新幾個小版本後就已經沒有任何維護了；要不然就是像 <a href="https://www.foxitsoftware.com/products/pdf-reader/comparison.php" target="_blank" rel="external">Foxit Reader</a> 那樣，維持最低限度的更新。</p>
<p><img src="http://downloads.xara.com/opensource/images/screenshots/technical/05.jpg" alt="圖片來源：Xara Xtreme"></p>
<p>在這幾年裡，<a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a> 開始流行，很多服務開始用「包著網頁當軟體」的方式來實現跨平台，如果打一開始就這樣推出的話到不是什麼問題，但如果是中途變更可能反而會造成反效果。</p>
<p>比如像 Linux 上的 Skype，簡直就像是半個僵屍一般，在 Linux 上破破爛爛的，當 Windows 跟 Mac 都換上新介面的時候，只有 Linux 版在被收購那一陣子換上微軟大大所有、加上微軟帳號登入後就不再有任何更新，不論官方論壇上的人有多憤怒，聽不到就是聽不到。</p>
<p>然而前幾天微軟突然發佈一個好消息，宣佈 Linux 版 Skype 重新製作的 Alpha 版測試，這基本上就是個大消息，之前他在表面上說自己有多麼積極擁抱 Linux 的時候，Linux 版的 Skype 默默的躺在一邊啜泣，而現在卻又重獲關注，多麼棒的消息！</p>
<p>Skype 的 GUI 是基於 Qt，但是在裝上 Alpha 版之後發現，怎麼捨棄了 Qt 用上 GTK 了？打開後的直覺是這應該是 <a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a> 打包的（<a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a> 基於 Chromium，Chromium 基於 GTK），Reddit 以及一些文章也有提到這件事；雖然 <a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a> 也是 <a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a> 打包的，用起來也不錯，但 Skype 這種作法實在是太忽悠人，畢竟有四五年沒有任何更新。尤其在這之前已經有許多人嘗試用這種方式打包網頁版了，其中有些運作得還不錯，微軟真的沒有直接拿別人的程式碼來改？再一次，微軟又讓人失望了。</p>
<p><img src="https://raw.githubusercontent.com/stanfieldr/ghetto-skype/develop/assets/screenshot.png" alt="Ghetto Skype, base on Electron（人家還可以選佈景勒）"></p>
<p>很多時候，在 Linux 上使用軟體真的覺得自己像個次等公民一樣，但現在 web 技術愈來愈發達，很多東西已經都是改在網頁上完成，所以這個隔閡就顯得比較不那麼嚴重了（但微軟還是該死）。</p>
<h2 id="遊戲"><a href="#遊戲" class="headerlink" title="遊戲"></a>遊戲</h2><p>拜 <a href="http://doom.com/" target="_blank" rel="external">DOOM</a> 系列遊戲 Open Source 所賜，以前 Linux 上 3D 大型遊戲裡佔絕大多數的就是 FPS 類遊戲，其他的就是一些像 <a href="https://supertux.github.io/" target="_blank" rel="external">SuperTux</a> 之類的 2D 小遊戲，沒有什麼能夠提起興趣的，主要還是開 Windows 打魔獸三國之類的居多。</p>
<p>後來 <a href="http://www.heroesofnewerth.com/" target="_blank" rel="external">HoN</a> 推出，第一款不用魔獸三就能獨立執行的 Dota 類遊戲，而且還支援 Linux，在玩過幾次之後就慫恿朋友也跟著跳坑，但無奈官方希望能夠用收費的方式經營，在歷經一年多的免費暢玩後，遊戲收費的第一天，人氣直跌谷底，分別回流到原本的魔獸與那時剛推出不久的 <a href="http://na.leagueoflegends.com/" target="_blank" rel="external">LoL</a>，過幾年後 <a href="http://blog.dota2.com/" target="_blank" rel="external">Dota2</a> 推出，我也就這樣轉戰過去了。幾年之後，<a href="http://www.heroesofnewerth.com/" target="_blank" rel="external">HoN</a> 默默改回免費模式，但已不再吸引人了。</p>
<p>之後開始工作時，玩的遊戲也變少了，通常都是周末時才會開 Windows 打一下 <a href="https://www.pathofexile.com/" target="_blank" rel="external">PoE</a> 或 <a href="http://blog.dota2.com/" target="_blank" rel="external">Dota2</a>，當時我跟我朋友開玩笑說：「如果兩款其中一款出了 Linux 版，那我大概就不會再切到 Windows 了」。在大約又快一年之後，<a href="http://www.valvesoftware.com/" target="_blank" rel="external">Valve</a> 開始全力推廣 Linux 遊戲，首先就將 <a href="http://blog.dota2.com/" target="_blank" rel="external">Dota2</a> 與 <a href="http://blog.counter-strike.net/" target="_blank" rel="external">CS:GO</a> 等旗下遊戲轉移到 Linux 上，從那時起，我自己的電腦就再也沒開過 Windows。</p>
<p>時至今日，Steam 上面的 Linux 遊戲愈來愈多，個人的收藏庫裡有過半是有支援 Linux，之後有空再來考慮怎麼玩那些 Windows 的遊戲。</p>
<p>以下是我遊戲收藏庫裡支援 Linux 的部份：</p>
<p><img src="https://c1.staticflickr.com/9/8741/28329841256_825459734b_o.png" alt=""><br><img src="https://c1.staticflickr.com/9/8364/28080825700_0741b46b63_o.png" alt=""><br><img src="https://c1.staticflickr.com/9/8477/27747748883_313829fc31_o.png" alt=""><br><img src="https://c1.staticflickr.com/9/8675/28080900750_a1dfe9c7da_o.png" alt=""></p>
<h2 id="最後說一點-Mac"><a href="#最後說一點-Mac" class="headerlink" title="最後說一點 Mac"></a>最後說一點 Mac</h2><p>雖說是因為工作需求而買了 Macbook Pro，但那時對 Mac 實在沒有什麼感覺，只是覺得「有一天應該會需要用 XCode 寫 APP 吧」，所以對當時的我來說，就像是花了幾萬塊買了 XCode，但卻從來沒用過的感覺。</p>
<p>用了幾年基本上除了覺得觸控版做得很棒之外，真的沒有什麼很特別的評價，不討厭也沒特別喜歡。不過上面的軟體倒是有不少挺喜歡的，比如 <a href="https://www.sketchapp.com/" target="_blank" rel="external">Sketch</a>、<a href="https://affinity.serif.com" target="_blank" rel="external">Affinity Designer</a> 等等，如果往後要說我為什麼會用 Mac 的話，大概會是因為上面有我喜歡的軟體吧（有 Linux 版我會很願意再花一次錢…，前提是功能要能完整體驗）。</p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><ul>
<li>感謝 Vista 讓我的人生有了轉折，其次是 Ubuntu（？</li>
<li>Windows 上可以互相取代的軟體非常多，如果有人又在拿 <a href="https://www.gimp.org/" target="_blank" rel="external">GIMP</a> 之類的說你或許不需要用 PS 云云，我建議你不妨先試試例如 <a href="http://www.getpaint.net/" target="_blank" rel="external">Paint.NET</a> 之類的替代方案，或是上 <a href="http://alternativeto.net/" target="_blank" rel="external">AlternativeTo</a> 找找看。</li>
<li>真的想用 <a href="https://www.gimp.org/" target="_blank" rel="external">GIMP</a> 或 <a href="https://inkscape.org/" target="_blank" rel="external">Inkscape</a> 的話，<a href="http://www.partha.com/" target="_blank" rel="external">這個網站</a>編譯打包的比較穩定。</li>
<li>Linux 推廣勸世文看看就好。</li>
<li>真的被勸成了也別挑 Ubuntu，挑 <a href="https://www.linuxmint.com/" target="_blank" rel="external">Linux Mint</a> 之類的 Ubuntu 衍生版比較穩定。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      紀錄我這幾年來，持續使用 Linux 當作一般作業系統的感想，文章以作業系統、桌面環境、開發環境、硬體支援、軟體、遊戲為大分類去做說明。
    
    </summary>
    
    
      <category term="Linux" scheme="https://notes.knovour.ninja/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>React/Redux 一個月的開發感想</title>
    <link href="https://notes.knovour.ninja/2016/05/23/my-experience-about-react-redux-in-one-month/"/>
    <id>https://notes.knovour.ninja/2016/05/23/my-experience-about-react-redux-in-one-month/</id>
    <published>2016-05-23T12:05:22.000Z</published>
    <updated>2016-07-20T12:42:51.863Z</updated>
    
    <content type="html"><![CDATA[<p>之前自學 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 時寫了一個簡單的線上簡歷，而我也確實靠他加分而拿到了工作，之後進去也是開始用 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 建立頁面，之後加上了 <a href="http://redux.js.org/" target="_blank" rel="external">Redux</a>；雖然這兩個總天數加起來大概就一個月，不敢說自己有摸清這些東西，不過還是就開發經驗來寫一些感想。</p>
<h2 id="先講結論"><a href="#先講結論" class="headerlink" title="先講結論"></a>先講結論</h2><p>對 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 其實不討厭，還算是喜歡的；但若是要我向別人推荐的話，我會建議學 <a href="https://vuejs.org/" target="_blank" rel="external">Vue.js</a> 入門，熟了再考慮要不要碰 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a>。若是不排斥用其他語言轉換成 js 的話，<a href="http://elm-lang.org/" target="_blank" rel="external">Elm</a> 看起來是個不錯的選擇，但 ES6 開始普及之後我對這方面的興趣不大，所以這個建議比較不負責任一點。</p>
<p>摸新東西當然都會面臨挫折、觀念轉變以及學習曲線的問題，但事實上，不把前後分離這件事考慮進去的話（畢竟這是前端 framework 最主要的目的），失去的不會比獲得的感受來的少多少，頂多接近打平，剩下的端看你的 M 體質點多高來去彌補。說實在的，當初把玩 <a href="https://www.rust-lang.org/" target="_blank" rel="external">Rust</a> 語言被摧殘到躺地板時我覺得還比較爽一點。<br><a id="more"></a></p>
<h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p><a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 是以函數式編程為原則來做開發，函數式編程幾個簡單的重點如：</p>
<ul>
<li><strong>數值不可變</strong>：在一些比較嚴格規定的語言如 <a href="https://www.haskell.org/" target="_blank" rel="external">Haskell</a> 的每個變數都是強制不可變的，而大部分的語言都是折衷分為可變與不可變。</li>
<li><strong>一個函數只做一件事</strong>：這表示函數要單純，所以要把處理的事情分的很清楚，對不是從函數式語言入門的人來說，要分多清楚端看過往寫程式的經驗以及潔癖程度。</li>
<li><strong>每次回傳都是一筆新的資料</strong>：基於數值不可變的特性。</li>
<li><strong>一樣的參數 =&gt; 一樣的結果</strong>：這點也包括不該改變參數原本的值，比如 <code>slice</code> 與 <code>splice</code> 這兩個函數都能夠回傳一個陣列指定範圍的切片，但 <code>splice</code> 不屬於純函數。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fruits = [<span class="string">'Banana'</span>, <span class="string">'Orange'</span>, <span class="string">'Lemon'</span>, <span class="string">'Apple'</span>, <span class="string">'Mango'</span>];</div><div class="line"></div><div class="line"><span class="comment">// 純函數</span></div><div class="line">fruits.slice(<span class="number">1</span>, <span class="number">3</span>);  <span class="comment">// ["Orange", "Lemon"]</span></div><div class="line">fruits.slice(<span class="number">1</span>, <span class="number">3</span>);  <span class="comment">// ["Orange", "Lemon"]</span></div><div class="line">fruits.slice(<span class="number">1</span>, <span class="number">3</span>);  <span class="comment">// ["Orange", "Lemon"]</span></div><div class="line"><span class="built_in">console</span>.log(fruits); <span class="comment">// ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']</span></div><div class="line"></div><div class="line"><span class="comment">// 非純函數</span></div><div class="line">fruits.splice(<span class="number">1</span>, <span class="number">3</span>);  <span class="comment">// ["Orange", "Lemon", "Apple"]</span></div><div class="line"><span class="built_in">console</span>.log(fruits);  <span class="comment">// ["Banana", "Mango"]</span></div><div class="line"></div><div class="line">fruits.splice(<span class="number">1</span>, <span class="number">3</span>);  <span class="comment">// ["Mango"]</span></div><div class="line"><span class="built_in">console</span>.log(fruits);  <span class="comment">// ["Banana"]</span></div><div class="line"></div><div class="line">fruits.splice(<span class="number">1</span>, <span class="number">3</span>);  <span class="comment">// []</span></div></pre></td></tr></table></figure>
<p>這會帶來什麼好處？</p>
<ul>
<li><strong>耦合度低</strong>：每個函數都很單純，程式碼簡短（通常）。</li>
<li><strong>容易測試</strong>：沒有副作用，傳入與傳出的結果是可預測的。</li>
<li><strong>效率</strong>：有一個叫 <a href="https://github.com/omcljs/om" target="_blank" rel="external">Om</a> 的項目，是以 <a href="https://github.com/clojure/clojurescript" target="_blank" rel="external">ClojureScript</a> 來寫 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 再轉成純 js，轉換後發現執行效率比用純 js 編寫高出了三倍，其中數值不可變是比較大的主因，促使 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 官方寫了 <a href="https://facebook.github.io/immutable-js/" target="_blank" rel="external">Immutable.js</a> 以達成一樣的結果。</li>
</ul>
<h2 id="入門"><a href="#入門" class="headerlink" title="入門"></a>入門</h2><p>入門不算困難，只要知道兩個資料夾的分工、怎麼組合起來，你就入門了。</p>
<h4 id="components"><a href="#components" class="headerlink" title="components"></a>components</h4><p>存放網頁單一元素的地方，比如按鈕、表單、卡片等會重複使用到的東西，程式碼會儘量保持簡單乾淨。</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Section.jsx</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Section</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">"section"</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Header.jsx</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Description.jsx</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Description</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.props.text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="containers"><a href="#containers" class="headerlink" title="containers"></a>containers</h4><p>載入各個 component 組合出一個頁面、進行數據傳遞以及一些事件綁定的函式建立等等，簡單講就是骯髒事儘量先在這邊處理再傳遞到各個 component。</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// App.jsx</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Section&gt;</div><div class="line">        &lt;Header title="Title" /&gt;</div><div class="line">        &lt;Description text="blablabla" /&gt;</div><div class="line">      &lt;/Section&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最終會生成這段 html：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>blablabla<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure>
<p>清楚明瞭是我剛入門時的第一個看法，尤其 jsx 的排法令人覺得賞心悅目，搭配 <a href="http://rscss.io/" target="_blank" rel="external">rscss</a> 似乎會是個不錯的選擇。</p>
<h2 id="入門之後？"><a href="#入門之後？" class="headerlink" title="入門之後？"></a>入門之後？</h2><p>js 基於結構靈活（鬆散）的特性、越來越多的 libraries、frameworks 以及往網頁以外的領域發展的趨勢，使之成為一門易學難精的語言。而 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 本身對於以往的開發方式與概念是完全截然不同的，加上 ES6 語法、Webpack、BABEL、npm script 等等東西幾乎是要一起摸索，而在你摸索期間發現，網路上用上 ES7 當作範例的情況愈來愈多，對於初學在尋求幫助上，無異於徒增困擾。</p>
<p>隨著項目稍微變大、程式碼變多時，另一個問題就浮現了（至少我覺得困擾），一份 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 程式碼（尤其是 containers 資料夾底下的）通常是一份混雜著 js + jsx + html 語法的檔案，必要時還會加點 css，理想狀況是 jsx 將 html 包成一個個 component 再組合，使用起來比純 html 要來的賞心悅目，但 jsx 本身混雜的大括號一多，甚至不得已混了一點純 html 標籤進去時，那一段就會變成一個看起來非常雜亂的區塊，進而讓整份程式碼看起來更加凌亂。</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// App.jsx</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      hideAlert: <span class="literal">true</span>,</div><div class="line">      hideModal: <span class="literal">true</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.openModal = <span class="keyword">this</span>.openModal.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.closeModal = <span class="keyword">this</span>.closeModal.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  openModal() &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      hideModal: <span class="literal">false</span></div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  closeModal() &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      hideModal: <span class="literal">true</span></div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> links = [&#123;</div><div class="line">      href: <span class="string">'#'</span>,</div><div class="line">      text: <span class="string">'Link1'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      href: <span class="string">'#'</span>,</div><div class="line">      text: <span class="string">'Link2'</span></div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Main&gt;</div><div class="line">        &lt;Nav&gt;</div><div class="line">          &#123;links.map((&#123; href, text &#125;, i) =&gt;</div><div class="line">            &lt;Link key=&#123;i&#125; href=&#123;href&#125; text=&#123;text&#125; /&gt;;</div><div class="line">          )&#125;</div><div class="line">        &lt;/Nav&gt;</div><div class="line">        &lt;Section&gt;</div><div class="line">          &lt;Header title="Title" /&gt;</div><div class="line">          &lt;Content&gt;</div><div class="line">            &lt;Description text="blablabla" /&gt;</div><div class="line">            &lt;Button primary onClick=&#123;this.openModal&#125; /&gt;</div><div class="line">          &lt;/Content&gt;</div><div class="line">          &lt;Alert hide=&#123;this.state.hideAlert&#125; text="You Idiot!!" /&gt;</div><div class="line">        &lt;/Section&gt;</div><div class="line">        &lt;Modal hide=&#123;this.state.hideModal&#125; header="Modal Header" description="blablabla" onClose=&#123;this.closeModal&#125; /&gt;</div><div class="line">      &lt;/Main&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>隨著鼓吹將 css 直接套進 jsx 的解決方案愈來愈多，無論你自己本身願不願意這樣寫，未來都將面臨看到愈來愈多將 css 硬塞進去的程式碼（事實上已經開始了），而你勢必得習慣他。</p>
<p>但這也不是沒有好處，以往載入如 <a href="http://getbootstrap.com/" target="_blank" rel="external">Bootstrap</a> 等的 framework 時，如果不考慮直接修改原始碼來改變樣式的話，很常需要另外寫 css 來覆蓋原本的設計，必要時還得補上 <code>!important</code>，如果用上如 <a href="http://semantic-ui.com/" target="_blank" rel="external">Semantic UI</a> 這種小元件很多又彼此有關聯的，那就有如一場災難。</p>
<p>jsx 裡的 css 以 JSON 格式儲存，如果想改變或新增部份的 <a href="http://www.material-ui.com/" target="_blank" rel="external">Material-UI</a> 裡的 css，只要寫進參數就可以直接替換。</p>
<blockquote>
<p>當然，這所謂的「好處」是建立在你用的東西是這樣幹的時候。</p>
</blockquote>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>引入了 <a href="http://redux.js.org/" target="_blank" rel="external">Redux</a> 之後，以往用 jQuery 的事件處理變成資料流的方式進行，其實我還滿喜歡這個概念的，但實際運用時卻是有點令人煩躁。</p>
<h4 id="觀念方面"><a href="#觀念方面" class="headerlink" title="觀念方面"></a>觀念方面</h4><p>在一開始時，我還在摸索 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a>，所以對於 Flux/Redux 的技術只有看看文章而已，或許是我資質駑鈍，但這些文章跟圖說實在很難在我腦中建立關聯，在我摸索了幾個簡單的 <a href="http://redux.js.org/" target="_blank" rel="external">Redux</a> 官方範例好一陣子後，我才慢慢有個概念出來。</p>
<h4 id="操作方面"><a href="#操作方面" class="headerlink" title="操作方面"></a>操作方面</h4><p><a href="http://redux.js.org/" target="_blank" rel="external">Redux</a> 引入之後，在原本的兩個資料夾為基礎新增了 <code>actions</code>、<code>reducers</code>、<code>store</code> 三個資料夾，而新增一個按鈕事件時，流程是這樣的：</p>
<ol>
<li>在 reducers 的 <code>button.js</code> 新增一個事件常數（比如 <code>CLICK</code>）進 switch case 裡。</li>
<li>在 actions 的 <code>button.js</code> 新增一個函數（比如 <code>click()</code>），負責傳遞這個常數以及資料過去給 reducer。</li>
<li>在 container 裡把 actions 裡的函數引進來，再傳給 Button component 做事件綁定。</li>
<li>Button component 接收到這個函數後，綁定在 DOM 事件上。</li>
</ol>
<p>為了新增一個事件，一個沒有要幹什麼大事的事件，我得跑過四個資料夾才算完成！！</p>
<h4 id="middlewares"><a href="#middlewares" class="headerlink" title="middlewares"></a>middlewares</h4><p>由於我是第一次使用 Redux，所以我決定不要任意引入額外的 middlewares，以了解 <a href="http://redux.js.org/" target="_blank" rel="external">Redux</a> 最原本的使用方式，但我還是去翻了翻一些網路範例常用的 middlewares，而這些 middlewares 常讓我有一個疑問（那感覺我也說不上來），他們到底是「解決方案」？還是「折衷方案」？抑或只是「虛幌一招」（看起來好像很厲害）？</p>
<blockquote>
<p>這恐怕只有在往後實際用上時才能體會了。</p>
</blockquote>
<h2 id="共通的問題"><a href="#共通的問題" class="headerlink" title="共通的問題"></a>共通的問題</h2><h4 id="重複的工作太多"><a href="#重複的工作太多" class="headerlink" title="重複的工作太多"></a>重複的工作太多</h4><p>每建立一個 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 檔案，就得先補上以下的程式碼：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">// return jsx or html;</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</div></pre></td></tr></table></figure>
<p>而 <a href="http://redux.js.org/" target="_blank" rel="external">Redux</a> 除了上面講的新增事件的困擾以外，如果是得多新增檔案，那也得補上跟其他檔案一樣的東西，縱使有 <a href="https://github.com/acdlite/redux-actions" target="_blank" rel="external">redux-actions</a> 之類的 middleware 改善，但也僅僅是就那麼點改善，這到底是「解決方案」？還是「折衷方案」？</p>
<h2 id="學習與開發重點"><a href="#學習與開發重點" class="headerlink" title="學習與開發重點"></a>學習與開發重點</h2><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><p><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">Airbnb JavaScript Style Guide</a> 可以當成一個不錯的 ES6 入門文件，之後再閱讀 <a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a>做更進一步的了解。</p>
<h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><ul>
<li>能用 css 解決的就用 css。</li>
<li>能用 Virtual DOM 解決的就不要用原生操作。</li>
<li>Say goodbye to jQuery.</li>
<li><a href="https://github.com/airbnb/javascript/tree/master/react" target="_blank" rel="external">Airbnb React/JSX Style Guide</a> 在 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 稍微懂一些後可以參考看看。</li>
<li><a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 大部分的 plugins 程式碼都不多，使用前不妨看一下原始碼，或許你只需要擷取出一部份，不用再多載一個就能自己實現。</li>
<li>ES6 的 class 只做了半套，在有一定程度了解後，ES7 不妨給他用下去。</li>
</ul>
<p>舉個簡單的例子，React 有 PropTypes 可以檢測傳進來的參數是否有錯誤，ES6 的寫法是這樣：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modal</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Modal.propTypes = &#123;</div><div class="line">  hide:        React.PropTypes.bool.isRequired,</div><div class="line">  header:      React.PropTypes.string.isRequired,</div><div class="line">  description: React.PropTypes.string.isRequired,</div><div class="line">  onClose:     React.PropTypes.func.isRequired</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>ES7：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modal</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    hide:        React.PropTypes.bool.isRequired,</div><div class="line">    header:      React.PropTypes.string.isRequired,</div><div class="line">    description: React.PropTypes.string.isRequired,</div><div class="line">    onClose:     React.PropTypes.func.isRequired</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Redux-1"><a href="#Redux-1" class="headerlink" title="Redux"></a>Redux</h4><ul>
<li>如果只是改變 component 自身狀態，不要考慮用。</li>
<li>跨 component 的事件處理如果數量不多，可以考慮不用。</li>
<li>第一次用建議不要用太多額外的 middlewares，先知道基本用法是怎樣，之後再去考慮這件事。</li>
</ul>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>其他前端 framework 除了 ES6/ES7、Webpack 等等要學之外有沒有各自的狀況？我想是有的，但在討論學習曲線這件事時，我想不會有像 Twitter 上這樣的<a href="https://twitter.com/floydophone/status/680226147213426688" target="_blank" rel="external">回應</a>。</p>
<p>就像前面說的，js 是個易學難精的語言，配上 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 不一樣的觀念以及整個生態後，無異於更多麻煩。但目前已決定在 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 上暫且繼續做下去，對其它流行的前端框架目前興趣不大，也沒有切換的打算。</p>
<p>但我想我之後下個階段會研究 <a href="https://github.com/Reactive-Extensions/RxJS" target="_blank" rel="external">RxJS</a> 與 <a href="http://cycle.js.org/" target="_blank" rel="external">Cycle.js</a> 吧，其中 <a href="http://cycle.js.org/" target="_blank" rel="external">Cycle.js</a> 與 <a href="http://redux.js.org/" target="_blank" rel="external">Redux</a> 都有從 <a href="http://elm-lang.org/" target="_blank" rel="external">Elm</a> 語言尋求靈感，所以 <a href="http://elm-lang.org/" target="_blank" rel="external">Elm</a> 或許也會成為一個考慮選項也說不定。</p>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ul>
<li><a href="https://ruby-china.org/topics/29901" target="_blank" rel="external">2016 年后 Web 开发趋势是什么</a></li>
<li><a href="http://pymaster.logdown.com/post/435999-react-nagging-tough-new-road" target="_blank" rel="external">React 碎碎念: 艱困的新手之路</a></li>
<li><a href="http://react-china.org/t/redux/2687" target="_blank" rel="external">这段时间研究了下Redux，写写自己对它的感觉</a></li>
</ul>
<h2 id="線上課程"><a href="#線上課程" class="headerlink" title="線上課程"></a>線上課程</h2><ul>
<li><a href="http://www.reactjsprogram.com/" target="_blank" rel="external">React.js Program</a>：React 線上教學，其中 <strong>React.js Fundamentals</strong> 這個入門課程是免費的，推荐。</li>
<li><a href="https://egghead.io/series/getting-started-with-redux" target="_blank" rel="external">Getting Started with Redux</a>：Redux 入門課程。</li>
</ul>
<h2 id="首圖來源"><a href="#首圖來源" class="headerlink" title="首圖來源"></a>首圖來源</h2><p><a href="https://react-redux.herokuapp.com/" target="_blank" rel="external">React Redux Example</a></p>
]]></content>
    
    <summary type="html">
    
      之前自學 React 時寫了一個簡單的線上簡歷，而我也確實靠他加分而拿到了工作，之後進去也是開始用 [React] 建立頁面，之後加上了 Redux；雖然這兩個總天數加起來大概就一個月，不敢說自己有摸清這些東西，不過還是就開發經驗來寫一些感想。
    
    </summary>
    
    
      <category term="react.js" scheme="https://notes.knovour.ninja/tags/react-js/"/>
    
      <category term="redux" scheme="https://notes.knovour.ninja/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>收到 Docker Beta 的通知信了！</title>
    <link href="https://notes.knovour.ninja/2016/05/08/docker-beta/"/>
    <id>https://notes.knovour.ninja/2016/05/08/docker-beta/</id>
    <published>2016-05-08T03:52:01.000Z</published>
    <updated>2016-05-08T04:50:10.428Z</updated>
    
    <content type="html"><![CDATA[<p>前兩天終於收到 Docker Beta for Mac 的通知信了，這次的 Docker Beta 在 Mac 和 Windows 底下擺脫了 VirtualBox 的依賴，並且在 Unikernel 技術的加持下，未來每個 container 只會留下需要的部份，打包成最小化的獨立作業系統。</p>
<p><img src="https://farm8.staticflickr.com/7745/26881682915_ee03a23196_o.png" alt=""></p>
<p>以後找個時間試試看用 <a href="http://rancher.com/rancher-os/" target="_blank" rel="external">RancherOS</a> 或 <a href="https://www.weave.works/" target="_blank" rel="external">Weave</a> 來組織 MicroService 好了。</p>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ul>
<li><a href="http://dockone.io/article/855" target="_blank" rel="external">到底什么是 Unikernel？</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前兩天終於收到 Docker Beta for Mac 的通知信了，這次的 Docker Beta 在 Mac 和 Windows 底下擺脫了 VirtualBox 的依賴，並且在 Unikernel 技術的加持下，未來每個 container 只會留下需要的部份，打包成最
    
    </summary>
    
    
      <category term="docker" scheme="https://notes.knovour.ninja/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>React.js 筆記 - Flux 的個人理解</title>
    <link href="https://notes.knovour.ninja/2016/05/02/react-flux-short-explain/"/>
    <id>https://notes.knovour.ninja/2016/05/02/react-flux-short-explain/</id>
    <published>2016-05-01T18:01:07.000Z</published>
    <updated>2016-05-02T11:10:24.019Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://facebook.github.io/react/" target="_blank" rel="external">React.js</a> 的 <a href="https://facebook.github.io/flux/" target="_blank" rel="external">Flux</a> 的部份我看了好久還是不太能理解他的意思，這幾天總算理出點頭緒（雖然不知道對不對…），在這邊做一點紀錄。</p>
<h2 id="簡單介紹"><a href="#簡單介紹" class="headerlink" title="簡單介紹"></a>簡單介紹</h2><p><a href="https://facebook.github.io/flux/" target="_blank" rel="external">Flux</a> 算是一套前端的處理流程，一般的講法就是前端版的 MVC，主要分四大部份：</p>
<ul>
<li>Action: 事件觸發或是跟後端溝通後，發送資料給 Dispatcher。</li>
<li>Dispatcher: 根據資料內容，分派至對應的函式做處理（通常是參照資料裡面的一個 <code>type</code> 屬性）。</li>
<li>Store: 儲存負責處理資料的函式，向 Dispatcher 註冊後，再由 Dispatcher 負責分發。</li>
<li>View: 接收處理後的結果並更新頁面。</li>
</ul>
<p>這邊所指的資料在 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React.js</a> 裡叫作 <code>state</code>，當 <code>state</code> 更新之後 View 就會對頁面做相對應的更新。</p>
<h2 id="用-jQuery-當範例"><a href="#用-jQuery-當範例" class="headerlink" title="用 jQuery 當範例"></a>用 jQuery 當範例</h2><p>以點擊按鈕就新增一張卡片為例，一開始用 jQuery 寫時，大概會像下面這樣子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#addCard'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//- 新增數據</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line"></div><div class="line">  <span class="comment">//- 生成 html 並放進網頁裡</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>隨著按鈕或其他元件的增加，要新增的事件也會變多，例如再增加一個刪除卡片：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#addCard'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//- 新增數據</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line"></div><div class="line">  <span class="comment">//- 生成 html 並放進網頁裡</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#delCard'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//- 處理要刪除的數據</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line"></div><div class="line">  <span class="comment">//- 刪除卡片的 html 部份</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>開發的時間久了之後，你可能會開始想要把 function 拆出來，並給予有意義的名字，例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#addCard'</span>).click(addCard);</div><div class="line">$(<span class="string">'#delCard'</span>).click(delCard);</div><div class="line"></div><div class="line"><span class="comment">/* 或是 */</span></div><div class="line"></div><div class="line">$(<span class="string">'#addCard'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  addCard(<span class="comment">/* 額外的參數 */</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#delCard'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  delCard(<span class="comment">/* 額外的參數 */</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCard</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//- 新增數據</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line"></div><div class="line">  <span class="comment">//- 生成 html 並放進網頁裡</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">delCard</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//- 處理要刪除的數據</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line"></div><div class="line">  <span class="comment">//- 刪除卡片的 html 部份</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本著 function 只處理一件事的精神，我們把更新頁面（View）的部份拆回來：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#addCard'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> data = addCard(<span class="comment">/* 額外的參數 */</span>);</div><div class="line"></div><div class="line">  <span class="comment">//- 生成 html 並放進網頁裡</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#delCard'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> data = delCard(<span class="comment">/* 額外的參數 */</span>);</div><div class="line"></div><div class="line">  <span class="comment">//- 刪除卡片的 html 部份</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCard</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//- 新增數據</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">delCard</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//- 處理要刪除的數據</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之後可能會想統整起來，改由一個 handler 之類的負責分派：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#addCard'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> data = CardHandler(&#123;</div><div class="line">    type: <span class="string">'ADD_CARD'</span>,</div><div class="line">    <span class="comment">/* 額外的參數 */</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">//- 生成 html 並放進網頁裡</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#delCard'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> data = CardHandler(&#123;</div><div class="line">    type: <span class="string">'DEL_CARD'</span>,</div><div class="line">    <span class="comment">/* 額外的參數 */</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">//- 刪除卡片的 html 部份</span></div><div class="line">  <span class="comment">/* do something */</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CardHandler</span>(<span class="params">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span>(action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'ADD_CARD'</span>:</div><div class="line">      <span class="comment">//- 新增數據</span></div><div class="line">      <span class="comment">/* do something */</span></div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'DEL_CARD'</span>:</div><div class="line">      <span class="comment">//- 處理要刪除的數據</span></div><div class="line">      <span class="comment">/* do something */</span></div><div class="line">      <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那整個 <a href="https://facebook.github.io/flux/" target="_blank" rel="external">Flux</a> 的流程，用很籠統的圖解大概是這樣：</p>
<p><img src="https://i.imgur.com/2IBUum7.gif" alt="Flux"></p>
<p><code>Store</code> 就是儲存事件所對應的工作，<code>Dispatcher</code> 負責分發；而 <a href="http://redux.js.org/" target="_blank" rel="external">Redux</a> 在此之上額外拆出了 <code>Reducer</code>，但基本流程不變。</p>
]]></content>
    
    <summary type="html">
    
      用 jQuery 來籠統講解 Flux 的流程。
    
    </summary>
    
    
      <category term="react.js" scheme="https://notes.knovour.ninja/tags/react-js/"/>
    
      <category term="redux" scheme="https://notes.knovour.ninja/tags/redux/"/>
    
      <category term="flux" scheme="https://notes.knovour.ninja/tags/flux/"/>
    
  </entry>
  
  <entry>
    <title>記憶中看過最不尊重設計的一件事</title>
    <link href="https://notes.knovour.ninja/2016/04/14/one-thing-about-disrespect-design-in-my-memory/"/>
    <id>https://notes.knovour.ninja/2016/04/14/one-thing-about-disrespect-design-in-my-memory/</id>
    <published>2016-04-14T12:41:48.000Z</published>
    <updated>2016-04-14T16:21:27.976Z</updated>
    
    <content type="html"><![CDATA[<p>這件事其實很久了，只是最近又想到它，所以乾脆紀錄下來好了。</p>
<p><a href="https://github.com/adobe-fonts/source-han-sans" target="_blank" rel="external">思源黑體</a>，一套完整的中文字體，可以在網頁上完整顯示，不會因為找不到字而出現豆腐框為主要目標，現在應該很多人都知道這個字體了；Google 那邊則另外命名叫 <a href="https://www.google.com/get/noto/" target="_blank" rel="external">Noto Sans</a>，不過重點不在這，這邊只是要紀錄一下思源黑體剛發佈時發生的事。</p>
<p>當時在 <a href="http://blog.typekit.com/" target="_blank" rel="external">Adobe Typekit Blog</a> 上，官方<a href="http://blog.typekit.com/alternate/source-han-sans-cht/" target="_blank" rel="external">發文</a>介紹了這個字體的誕生，談了一下設計的人員，以及講解一些中文字在使用漢字的國家之間寫法的差異。</p>
<p>但有個傢伙卻開始在留言中大談古字的真善美，談台灣教育部的不是，義正辭嚴的要求遵循「正統」繁體中文的字體寫法，鬧了一輪後還去辦了個 GitHub 帳號跑去發 <a href="https://github.com/adobe-fonts/source-han-sans/issues/6" target="_blank" rel="external">issue</a> 再來一次，硬要這群國外設計團隊也該當個考古學者；在這串上面大放厥詞拍拍屁股後，直到現在再也沒有在任何 issue 裡出現過。</p>
<blockquote>
<p>網路留言看久了之後感覺，那種習慣把自己叫「在下」的人，要馬只是單純宅了點，要馬就是個白目。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      紀錄一下思源黑體剛發佈時發生的事
    
    </summary>
    
    
      <category term="雜談" scheme="https://notes.knovour.ninja/tags/%E9%9B%9C%E8%AB%87/"/>
    
  </entry>
  
  <entry>
    <title>D3 + p5.js 筆記 - Bar Chart</title>
    <link href="https://notes.knovour.ninja/2016/03/29/d3-p5-js-notes-bar-chart/"/>
    <id>https://notes.knovour.ninja/2016/03/29/d3-p5-js-notes-bar-chart/</id>
    <published>2016-03-29T15:36:17.000Z</published>
    <updated>2016-03-30T15:31:45.912Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/Knovour/d3-p5-practice/tree/master/example/bar" target="_blank" rel="external">程式碼</a></li>
<li><a href="http://bl.ocks.org/mbostock/3885304" target="_blank" rel="external">範例來源</a></li>
</ul>
<h2 id="程式碼說明"><a href="#程式碼說明" class="headerlink" title="程式碼說明"></a>程式碼說明</h2><p>這次範例來源有 hover 的顏色變化，為了省略寫作標判定的部份，我另外載入了 <a href="http://p5play.molleindustria.org/" target="_blank" rel="external">p5.play.js</a>。<br><a id="more"></a></p>
<p>大部分的區塊應該不用特別講了，大概提一下 <a href="http://p5play.molleindustria.org/" target="_blank" rel="external">p5.play.js</a> 的一點坑就好。</p>
<p><code>createSprite</code> 的座標指的是每個 bar 的中心點，向外畫出矩形，所以不會像一般畫長方形一樣，座標在左上角，若不額外調整位置會跑掉。然而，這種畫法是不是最終定案不清楚，畢竟 <a href="http://p5play.molleindustria.org/" target="_blank" rel="external">p5.play.js</a> 還不是正式版。</p>
<h2 id="題外話"><a href="#題外話" class="headerlink" title="題外話"></a>題外話</h2><p>用 <code>canvas</code> 畫圖其中一個麻煩的地方大概就是游標判定了，<a href="http://p5play.molleindustria.org/" target="_blank" rel="external">p5.play.js</a> 的游標判定功能不算強大，只有支援圓跟矩形，圖片則是有另外的判定方式（游標底下是不是透明背景之類），跟其他遊戲引擎類的差不多。</p>
<p>像百度的 <a href="http://echarts.baidu.com/" target="_blank" rel="external">ECharts</a> 的範例互動多半也是用比較折衷的做法。</p>
<p>不過之前看到了 <a href="http://paperjs.org" target="_blank" rel="external">Paper.js</a> 這個東西，在游標測試的<a href="http://paperjs.org/examples/hit-testing/" target="_blank" rel="external">範例</a>裡看起來運作得很完美，改天來試試看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Knovour/d3-p5-practice/tree/master/example/bar&quot;&gt;程式碼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bl.ocks.org/mbostock/3885304&quot;&gt;範例來源&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;程式碼說明&quot;&gt;&lt;a href=&quot;#程式碼說明&quot; class=&quot;headerlink&quot; title=&quot;程式碼說明&quot;&gt;&lt;/a&gt;程式碼說明&lt;/h2&gt;&lt;p&gt;這次範例來源有 hover 的顏色變化，為了省略寫作標判定的部份，我另外載入了 &lt;a href=&quot;http://p5play.molleindustria.org/&quot;&gt;p5.play.js&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Sails.js 的一些問題及現況</title>
    <link href="https://notes.knovour.ninja/2016/03/23/problems-about-sails-js/"/>
    <id>https://notes.knovour.ninja/2016/03/23/problems-about-sails-js/</id>
    <published>2016-03-22T16:00:06.000Z</published>
    <updated>2016-03-23T11:38:48.557Z</updated>
    
    <content type="html"><![CDATA[<p>本來標題想寫「Sails.js 算不算死了」，不過這樣似乎太過分了，這篇主要是講講之前用它來開發的感受。</p>
<h2 id="TL-DR-不負責任懶人包"><a href="#TL-DR-不負責任懶人包" class="headerlink" title="TL;DR - 不負責任懶人包"></a>TL;DR - 不負責任懶人包</h2><p><a href="http://sailsjs.org/" target="_blank" rel="external">Sails.js</a> 主要維護者 <a href="https://github.com/mikermcneil" target="_blank" rel="external">mikermcneil</a> 與其中一位成員 <a href="https://github.com/tjwebb" target="_blank" rel="external">tjwebb</a> 有「理念上的問題」，導致開發停滯了超過半年之久，之後後者離開另外建立了 <a href="https://github.com/trailsjs" target="_blank" rel="external">Trails.js</a>，而 <a href="http://sailsjs.org/" target="_blank" rel="external">Sails.js</a> 在今年繼續維護。<br><a id="more"></a></p>
<h2 id="長篇抱怨文"><a href="#長篇抱怨文" class="headerlink" title="長篇抱怨文"></a>長篇抱怨文</h2><p>去年的時候，<a href="http://sailsjs.org/" target="_blank" rel="external">Sails.js</a> 的版本停在 0.12.0-rcX（忘記哪個號碼）超過半年之久；在這段期間，issue 上面的回應也零零落落的，而我那時才知道，開發團隊其實有養一隻 <a href="https://github.com/sailsbot" target="_blank" rel="external">GitHub robot</a>，太久沒回應的 issue 會強制關掉，這到是讓我感到不滿。</p>
<p>當初 <a href="https://nodejs.org" target="_blank" rel="external">Node.js</a> 入門時是從 <a href="http://expressjs.com/" target="_blank" rel="external">Express.js</a> 開始的，也很習慣從這樣一個基礎的 framework 再自己安裝其他 plugin 兜成自己需要的東西，但每建一個新的專案就要重新兜一次，久了其實也挺煩的，當時也不知道 <a href="http://yeoman.io/" target="_blank" rel="external">Yeoman</a> 這種工具。</p>
<p>後來試了 <a href="http://krakenjs.com/" target="_blank" rel="external">Kraken.js</a> 以及 <a href="http://sailsjs.org/" target="_blank" rel="external">Sails.js</a> 這兩個比較屬於包山包海的 framework，而且都是以 <a href="http://expressjs.com/" target="_blank" rel="external">Express.js</a> 為基底再包上一層，在使用一段時間後卻覺得這反而讓我更加麻煩，表面上似乎是幫你解決了一些雜事，反之要面對的卻是一長串看似方便其實很亂的 <code>config</code> 參數。</p>
<p>當時用了 Kraken 1.x 的版本，就像是包上了一層薄薄的蝦殼，薄到讓我覺得多包這一層沒什麼太大的意義，原本 <code>middleware</code> 的載入方式改成透過 <code>config</code> 反而變得很難用，加上當時在折騰 <a href="http://socket.io/" target="_blank" rel="external">Socket.IO</a>，而 <a href="http://krakenjs.com/" target="_blank" rel="external">Kraken.js</a> 並沒有往這方面做進一步整合，導致不論是在 <a href="http://expressjs.com/" target="_blank" rel="external">Express.js</a> 或是 <a href="http://krakenjs.com/" target="_blank" rel="external">Kraken.js</a> 裡加上 <a href="http://socket.io/" target="_blank" rel="external">Socket.IO</a> 的方式是差不多的，但後者還得多繞一點彎路，本末倒置。</p>
<p>而 <a href="http://sailsjs.org/" target="_blank" rel="external">Sails.js</a> 有將之另外整合，並打包成了 sails.io.js，相比之下方便不少，所以最後採用它來寫了幾個專案，但一段時間後也開始有了一些怨氣，一個是預設作為自動化排程的 <a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a> 非常難用，相關設定又臭又長而且不盡相同，我曾為了某個 plugin 設定搞不定而折騰很長一段時間，最後卻是參考其他不相關的 plugin 的設定方式照著改過去才成功。</p>
<p>另一方面是作為核心的 <a href="http://expressjs.com/" target="_blank" rel="external">Express.js</a> 的版本問題，<a href="http://krakenjs.com/" target="_blank" rel="external">Kraken.js</a> 因為有 <a href="https://www.paypal.com" target="_blank" rel="external">PayPal</a> 罩著，所以遷移到 Express 4.x 的速度很快，但 <a href="http://sailsjs.org/" target="_blank" rel="external">Sails.js</a> 就不是這麼一回事了，官方一直停在 3.x 版，開發又停滯了一段時間，使得以 <a href="http://expressjs.com/" target="_blank" rel="external">Express.js</a> 為主的 plugin 也得限制版本號才能使用，本來這不是什麼大問題，因為當時連 <a href="https://nodejs.org" target="_blank" rel="external">Node.js</a> 的更新也很緩慢，也是在 0.12 上卡了很長一段時間，後來在用 <a href="http://sailsjs.org/" target="_blank" rel="external">Sails.js</a> 寫最後一個專案時，<a href="https://nodejs.org" target="_blank" rel="external">Node.js</a> 突然直接跳到了 4 版，不久 5 版也跟著推出了。這下感受就大不同了（還是可以動，主要是奇蒙子問題），那時也才開始在意 <a href="http://sailsjs.org/" target="_blank" rel="external">Sails.js</a> 停滯很長一段時間這件事；在這段時間裡，也造成一些 issue 因為沒有後續回應的關係而被官方的 bot 自動關掉，最後決定趁著專案的開發時間還不算久的情況下，直接改用 <a href="http://koajs.com/" target="_blank" rel="external">Koa.js</a> 重新開發，不再碰 <a href="http://sailsjs.org/" target="_blank" rel="external">Sails.js</a>。</p>
<p>在遷移一陣子之後，發現了 <a href="https://github.com/trailsjs" target="_blank" rel="external">Trails.js</a> 的存在，這是 <a href="http://sailsjs.org/" target="_blank" rel="external">Sails.js</a> 的其中一個成員離開之後建立的專案，看裡面的專案數量，似乎是以 <a href="http://koajs.com/" target="_blank" rel="external">Koa.js</a>、<a href="http://expressjs.com/" target="_blank" rel="external">Express.js</a>、<a href="http://hapijs.com/" target="_blank" rel="external">Hapi.js</a> 等各個基礎 framework 為底，再分別客製打包而成，在安裝時就可以選自己順手的為底來往上建立，選擇上比較靈活，但官方維護的心力應該也多了不少，目前還在 1.0 alpha，能不能取代 <a href="http://sailsjs.org/" target="_blank" rel="external">Sails.js</a> 還得再觀察。</p>
<h2 id="相關網址"><a href="#相關網址" class="headerlink" title="相關網址"></a>相關網址</h2><ul>
<li><a href="https://github.com/langateam/sails-permissions/issues/200" target="_blank" rel="external">Ending Sails.js Support. Migrating sails-permissions to Trails</a>（裡面有列一些相關討論的 issue 連結，包含雙方各自的說法）</li>
<li><a href="http://knovourland.logdown.com/posts/search?utf8=%E2%9C%93&amp;q=kraken.js" target="_blank" rel="external">以前 Blog 寫的 Kraken.js 筆記</a>（不過現在都 2.0 了，應該比較沒參考價值了）</li>
</ul>
<h2 id="Trails-js-介紹影片"><a href="#Trails-js-介紹影片" class="headerlink" title="Trails.js 介紹影片"></a>Trails.js 介紹影片</h2><div class="video-container"><iframe src="//www.youtube.com/embed/AbSp8jqFDAY" frameborder="0" allowfullscreen></iframe></div>
<h2 id="自肥區"><a href="#自肥區" class="headerlink" title="自肥區"></a>自肥區</h2><p>我把在使用 <a href="http://koajs.com/" target="_blank" rel="external">Koa.js</a> 這段期間用到的 plugins 以自己覺得合適的架構打包，並用 <a href="http://yeoman.io/" target="_blank" rel="external">Yeoman</a> 來做自動化安裝，不過目前只有做將整個專案架構複製到自己的資料夾裡這件事而已，更多客製化的方式還得研究研究，另外之後會先把 plugins 刪掉一大部分，並將 <a href="http://gulpjs.com/" target="_blank" rel="external">Gulp.js</a> 改成單純的用 npm script 來自動化管理專案，等這些基本問題弄好後，再把其他 plugins 加回去。</p>
<ul>
<li><a href="https://github.com/Knovour/generator-koat" target="_blank" rel="external">專案網址</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      講講之前使用 Sail.js 的一些感受，以及這幾個月 Sails 官方的一些問題。
    
    </summary>
    
    
      <category term="node.js" scheme="https://notes.knovour.ninja/tags/node-js/"/>
    
      <category term="sails.js" scheme="https://notes.knovour.ninja/tags/sails-js/"/>
    
  </entry>
  
  <entry>
    <title>D3 + p5.js 筆記 - 自訂 preload 的 Ajax</title>
    <link href="https://notes.knovour.ninja/2016/03/22/d3-p5-js-notes-custom-ajax-preload/"/>
    <id>https://notes.knovour.ninja/2016/03/22/d3-p5-js-notes-custom-ajax-preload/</id>
    <published>2016-03-22T08:17:20.000Z</published>
    <updated>2016-03-22T10:15:00.049Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://p5js.org/" target="_blank" rel="external">p5.js</a> 已經內建數種檔案請求的方式，這邊紀錄一下自己建立 ajax 請求註冊到 <code>preload()</code> 的方式（以 <a href="https://d3js.org/" target="_blank" rel="external">D3</a> 為例）。</p>
<script src="https://gist.github.com/Knovour/57b761d08ff758396ab6.js?file=p5-private-preload.js"></script>

<p>這邊要注意的是，在第 10 行的部份，請求後的資料不能直接指定給預先宣告的變數，否則 <code>setup()</code> 取資料時會是 <code>undefined</code>，或者可以這樣宣告：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="comment">// load function</span></div><div class="line"><span class="keyword">let</span> tmp = &#123; list: [] &#125;;</div><div class="line"><span class="comment">// ---</span></div></pre></td></tr></table></figure>
<p>在取得資料後直接將資料指定給 <code>tmp.list</code>，在 <code>setup()</code> 裡直接以 <code>data.list</code> 的方式取值即可，而範例裡的 <code>return</code> 跟 <code>callback</code> 都是必要的，省略任何一樣都會出現 <code>undefined</code>。</p>
<p>不用 <code>new</code> 的方式可以到<a href="https://gist.github.com/Knovour/57b761d08ff758396ab6" target="_blank" rel="external">這裡</a>檢視。</p>
]]></content>
    
    <summary type="html">
    
      給 p5.js 的 preload function 增加自訂的 ajax 請求。
    
    </summary>
    
    
      <category term="D3" scheme="https://notes.knovour.ninja/tags/D3/"/>
    
      <category term="p5.js" scheme="https://notes.knovour.ninja/tags/p5-js/"/>
    
  </entry>
  
  <entry>
    <title>D3 + p5.js 筆記 - Area Chart</title>
    <link href="https://notes.knovour.ninja/2016/03/03/d3-p5-js-notes-area-chart/"/>
    <id>https://notes.knovour.ninja/2016/03/03/d3-p5-js-notes-area-chart/</id>
    <published>2016-03-03T14:44:07.000Z</published>
    <updated>2016-03-21T14:11:16.378Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/Knovour/d3-p5-practice/tree/master/example/area" target="_blank" rel="external">程式碼</a></li>
<li><a href="http://bl.ocks.org/mbostock/3883195" target="_blank" rel="external">範例來源</a></li>
</ul>
<h2 id="程式碼說明"><a href="#程式碼說明" class="headerlink" title="程式碼說明"></a>程式碼說明</h2><p>以下主要說明部份的坑以及重點，請配合 GitHub 的 js 程式碼服用。<br><a id="more"></a></p>
<h3 id="preload"><a href="#preload" class="headerlink" title="preload"></a>preload</h3><p><code>ctx.loadTable</code> 是非同步處理，最普通的作法就是指定給宣告的變數</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dataset = ctx.loadTable(<span class="string">'area.tsv'</span>, <span class="string">'tsv'</span>, <span class="string">'header'</span>, callback)</div></pre></td></tr></table></figure>
<p>但 preload 請求的資料，在 <code>setup</code> 函式裡才可以使用，如果直接在 preload 裡 console 出來是沒有東西的，但你可以宣告 callback function 來對資料預先處理。</p>
<p>不得不說，p5.js 的 <code>loadTable</code> 幫你整理資料這件事實在非常多餘，幫你把資料整理好了，但你卻沒法直接取出完整的 json 陣列資料。</p>
<p><img src="https://farm2.staticflickr.com/1590/25066224863_bd6917b041_o.png" alt=""></p>
<p>而官方提供的 API 中，最接近的 <code>getObject</code> 取出來的樣子是：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">'0'</span>: data1,</div><div class="line">  <span class="string">'1'</span>: data2,</div><div class="line">  <span class="string">'2'</span>: ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>WTF</strong></p>
<h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><p>主要就是在這邊讓 D3 計算縮放後的刻度、座標，由於 <code>draw</code> 的函式預設會刷新畫布，所以能夠事先計算的部份都盡量放在 setup 裡。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">xScale = d3.time.scale()</div><div class="line">  .domain(d3.extent(dataset, d =&gt; d.date))</div><div class="line">  .range([ chartX, chartWidth + chartX ]);</div><div class="line"></div><div class="line">xTickFmt = xScale.tickFormat(date =&gt; date.getFullYear());</div><div class="line">xLabels  = xScale.ticks(d3.time.year);</div><div class="line"></div><div class="line">yScale = d3.scale.linear()</div><div class="line">  .domain([ <span class="number">0</span>, d3.max(dataset, (&#123; close &#125;) =&gt; close) ])</div><div class="line">  .range([ chartHeight + chartY, chartY ]);</div><div class="line"></div><div class="line">yLabels = yScale.ticks(<span class="number">10</span>);</div></pre></td></tr></table></figure>
<p><code>domain</code>、<code>range</code>，簡單來講就是從資料以及指定的畫布大小來決定畫布上的座標，省去寫縮放程式碼的麻煩。</p>
<p>X 軸是以時間為刻度，用 D3 的 <code>ticks</code> 設定為以年份劃分刻度，Y 軸則設定為分割成 10 個座標。ticks 最後會產生一串陣列，裡面存放刻度的標籤名稱，用 <code>yScale(data)</code> 可以取得該筆資料在 Y 軸的位置。</p>
<h3 id="draw"><a href="#draw" class="headerlink" title="draw"></a>draw</h3><p>p5 預設會重複畫 draw 裡的內容，可以在 setup 補上 <code>noLoop</code> 來關掉自動重繪，否則也要在 draw 的開頭使用 <code>clean</code> 來清掉畫布，否則畫布上的元素會重複疊加上去。另外畫布的背景預設為透明，故需先畫上指定顏色的背景，否則存成圖檔時會是透明背景。</p>
<p>這邊注意的一點是，除了 <code>stroke</code>、<code>fill</code> 等等會影響畫筆（ctx）行為之外，有些則是會影響整個畫布的，比如 <code>rotate</code> 會把要畫的圖層整個旋轉，結尾要使用 <code>resetMatrix</code> 調回原狀，或是用 <code>push</code> 與 <code>pop</code> 來暫存原本的狀態。</p>
<p>比如前面設定 fill 的顏色，但是在 push 與 pop 之間使用 <code>noFill</code> 時，當 pop 出來後畫筆依舊是 fill 的狀態。</p>
]]></content>
    
    <summary type="html">
    
      用 D3 + p5.js 繪製 Area Chart
    
    </summary>
    
    
      <category term="D3" scheme="https://notes.knovour.ninja/tags/D3/"/>
    
      <category term="p5.js" scheme="https://notes.knovour.ninja/tags/p5-js/"/>
    
  </entry>
  
  <entry>
    <title>D3 + p5.js 筆記 - 介紹 p5</title>
    <link href="https://notes.knovour.ninja/2016/03/03/d3-p5-js-notes-introduce-p5/"/>
    <id>https://notes.knovour.ninja/2016/03/03/d3-p5-js-notes-introduce-p5/</id>
    <published>2016-03-02T16:43:10.000Z</published>
    <updated>2016-03-21T13:21:27.885Z</updated>
    
    <content type="html"><![CDATA[<p>先來大致介紹一下 <a href="http://p5js.org/" target="_blank" rel="external">p5.js</a>。</p>
<p>這是 <a href="https://processing.org/" target="_blank" rel="external">Processing</a> 團隊移植的 web 版本，除了 <a href="http://p5js.org/" target="_blank" rel="external">p5</a> 之外還有一個是由 jQuery 作者自己實現，叫 <a href="http://processingjs.org/" target="_blank" rel="external">Processingjs</a> 的函式庫，可別搞混了。</p>
<h2 id="為什麼選擇-p5？"><a href="#為什麼選擇-p5？" class="headerlink" title="為什麼選擇 p5？"></a>為什麼選擇 p5？</h2><p>以前大學時有教授教過 <a href="https://processing.org/" target="_blank" rel="external">Processing</a> 算是因素之一，入門上不算太難。</p>
<p>在圖片繪製上，<a href="http://p5js.org/" target="_blank" rel="external">p5</a> 也簡化了一些步驟，比如畫線的時候，canvas 的畫法是</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">canvas.moveTo(x, y);</div><div class="line">canvas.lineTo(x2, y2);</div></pre></td></tr></table></figure>
<p>而 <a href="http://p5js.org/" target="_blank" rel="external">p5</a> 只要一個 <code>line</code> 就可以解決。稍微試過 <a href="http://www.pixijs.com/" target="_blank" rel="external">Pixi.js</a> 與 <a href="http://createjs.com/easeljs" target="_blank" rel="external">EaselJS</a>，這兩個基本上跟 canvas 原本的畫法差不了多少，畢竟定位是遊戲引擎，<a href="http://p5js.org/" target="_blank" rel="external">p5</a> 是繪圖函式庫。<br><a id="more"></a></p>
<h3 id="canvas-1px-直線問題"><a href="#canvas-1px-直線問題" class="headerlink" title="canvas 1px 直線問題"></a>canvas 1px 直線問題</h3><p>canvas 有一個渲染上的問題，很多剛碰的人大概都會遇到，在畫 1px（或其他奇數）寬的線時，在螢幕上顯示卻有 2px 寬。</p>
<p>簡單圖解類似這樣：</p>
<p><img src="https://farm2.staticflickr.com/1464/25094916659_97593ca520_z.jpg" alt="canvas"></p>
<p>當在座標上畫線時，canvas 並不會在該座標的 右邊或左邊畫線，而是會以座標為準，向兩邊各佔用一半的 px，在這邊就各佔用了 0.5px。而 canvas 的渲染機制就會把兩邊剩下的 0.5 補上顏色，類似防鋸齒那樣，就造成畫 1px 卻有 2px 寬的情形發生。</p>
<p>解決方式就是向前或向後退 0.5 px，而 <a href="http://p5js.org/" target="_blank" rel="external">p5</a> 會幫你搞定這件事，但由於 [D3] 在幫你計算刻度座標時，數值不會那麼漂亮，所以還是會有漏網之魚發生，至少 XY 軸是正常顯示的。</p>
<h2 id="p5-的基本構造"><a href="#p5-的基本構造" class="headerlink" title="p5 的基本構造"></a>p5 的基本構造</h2><p>基本上要先建立以下三個函數：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">preload</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 載入 csv, tsv 等檔案</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 初始化資料、建立 canvas 等</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 繪製圖形</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中 <code>preload</code> 可有可無，端看須不需要額外載入資料檔案，而絕大部分繪製的相關函數<strong>必須</strong>要在 <a href="http://p5js.org/" target="_blank" rel="external">p5</a> 指定的函數裡呼叫，否則不會有作用。當然也有其他的函數是獨立的（比如事件偵測），但絕大部分的還是得照著規則進行。</p>
<h2 id="p5-的問題"><a href="#p5-的問題" class="headerlink" title="p5 的問題"></a>p5 的問題</h2><h3 id="全域變數"><a href="#全域變數" class="headerlink" title="全域變數"></a>全域變數</h3><p><a href="http://p5js.org/" target="_blank" rel="external">p5</a> 的函數都是全域變數，而一個網頁照一般的寫法也只會寫一個 <code>preload</code>、<code>setup</code>、<code>draw</code> 等函數，當需要數個 canvas 時（畫圖表時有多個畫布很正常吧），創建 canvas 的程式碼全都要擠在同一個 setup 裡（無法用匿名函數分開包裝），在繪製時又會全部擠在一起一次，因而造成很大的麻煩。</p>
<h3 id="編輯器"><a href="#編輯器" class="headerlink" title="編輯器"></a>編輯器</h3><p>正因為 <a href="http://p5js.org/" target="_blank" rel="external">p5</a> 函式都是全域變數不須宣告，所以當你在寫程式碼時，你的編輯器會出現一堆下劃線，提醒你變數未宣告之類的錯誤。</p>
<h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><p>用 <code>new</code> 宣告一個。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> p5(ctx =&gt; &#123;</div><div class="line">  ctx.setup = () =&gt; &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ctx.draw = () =&gt; &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在這裡面，不管要使用什麼函數，都要用 <code>ctx.[函數名稱]</code> 才可使用，但也避免了瀏覽器與編輯器的問題。</p>
<h2 id="其他參考"><a href="#其他參考" class="headerlink" title="其他參考"></a>其他參考</h2><ul>
<li><a href="http://p5js.sketchpad.cc/sp/padlist/all-portfolio-sketches" target="_blank" rel="external">sketchpad</a>: 網路上有一個 <a href="http://p5js.sketchpad.cc/sp/padlist/all-portfolio-sketches" target="_blank" rel="external">sketchpad</a>，上面列了一些用 <a href="http://p5js.org/" target="_blank" rel="external">p5</a> 繪製的圖片與程式碼，可以大致了解一下怎麼寫出來的。</li>
<li><a href="http://blog.infographics.tw/2015/03/beginner-visualization-with-p5js/" target="_blank" rel="external">p5.js － 初學者的資料視覺化函式庫</a></li>
<li><a href="http://ithelp.ithome.com.tw/question/10096456" target="_blank" rel="external">Processing.js 的一些介紹及分享</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      大致介紹一下 p5.js，以及一些小特性
    
    </summary>
    
    
      <category term="D3" scheme="https://notes.knovour.ninja/tags/D3/"/>
    
      <category term="p5.js" scheme="https://notes.knovour.ninja/tags/p5-js/"/>
    
  </entry>
  
  <entry>
    <title>D3 + p5.js 筆記 - 前言</title>
    <link href="https://notes.knovour.ninja/2016/03/01/d3-p5-js-notes/"/>
    <id>https://notes.knovour.ninja/2016/03/01/d3-p5-js-notes/</id>
    <published>2016-03-01T01:20:14.000Z</published>
    <updated>2016-03-02T19:04:02.176Z</updated>
    
    <content type="html"><![CDATA[<p>這陣子看了點 <a href="https://d3js.org/" target="_blank" rel="external">D3</a>，並找了官方 wiki 的<a href="https://github.com/mbostock/d3/wiki/Gallery" target="_blank" rel="external">範例</a>來試試，不過不是用 SVG，而是用 canvas 來畫。</p>
<p>之前要寫的網站要生成簡易的圖表，但因為沒學過 <a href="https://d3js.org/" target="_blank" rel="external">D3</a> 的經驗（當時也來不及），所以找了現成的 <a href="http://www.chartjs.org/" target="_blank" rel="external">Chart.js</a> 來用，除了這套之外，之後也在 feedly 看了不少圖表生成的套件介紹，蠻多都是用 canvas 的。不過這倒也不是什麼選擇 canvas 的原因。</p>
<blockquote>
<p>單純犯賤罷了…</p>
</blockquote>
<p>然而，<a href="https://d3js.org/" target="_blank" rel="external">D3</a> 對 canvas 的支援不好，不過這也不是很意外。問題在於要怎麼用 <a href="https://d3js.org/" target="_blank" rel="external">D3</a> 把處理後的資料給 canvas 畫，根據<a href="http://blog.infographics.tw/2015/07/optimize-d3-with-canvas/" target="_blank" rel="external">這裡</a>的介紹，第三種方式算是我在網路上最常看見的，基本上就是處理資料並創建虛假的元素，假裝自己在操作 SVG，然後再把這些<strong>假元素</strong>吐出來再用 canvas 的方式畫出來，怎麼看都覺得…蠻蠢的。所以我比較偏好第二種方式，讓 <a href="https://d3js.org/" target="_blank" rel="external">D3</a> 負責處理資料、生成刻度等等，再用 <a href="http://p5js.org/" target="_blank" rel="external">p5.js</a> 直接畫上去。</p>
<p>總之，之後會加減從 <a href="https://d3js.org/" target="_blank" rel="external">D3</a> 官方的<a href="https://github.com/mbostock/d3/wiki/Gallery" target="_blank" rel="external">範例</a>裡面先挑簡單的例子來練習，也會原始碼放到 GitHub 上。</p>
]]></content>
    
    <summary type="html">
    
      往後會用 [D3] 官方範例來練習，並用 [p5.js] 繪製而成，程式碼會放到 GitHub 上。
    
    </summary>
    
    
      <category term="D3" scheme="https://notes.knovour.ninja/tags/D3/"/>
    
      <category term="p5.js" scheme="https://notes.knovour.ninja/tags/p5-js/"/>
    
  </entry>
  
  <entry>
    <title>Koa.js 踩坑筆記</title>
    <link href="https://notes.knovour.ninja/2016/02/21/koa-notes/"/>
    <id>https://notes.knovour.ninja/2016/02/21/koa-notes/</id>
    <published>2016-02-21T13:55:52.000Z</published>
    <updated>2016-02-27T21:03:14.854Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 以 <a href="https://github.com/koajs/koa/tree/v2.x" target="_blank" rel="external">Koa.js 2.0.0-alpha.3</a> 版本為主。 </strong></p>
<h2 id="ctx-body-沒反應"><a href="#ctx-body-沒反應" class="headerlink" title="ctx.body 沒反應"></a><code>ctx.body</code> 沒反應</h2><p>當 <code>ctx.body</code> 在 Promise 的函式裡時（如 co）則不會對頁面有任何反應，需在該函式前加上 <code>return</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">index(ctx) &#123;</div><div class="line">  <span class="keyword">return</span> co(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123; <span class="comment">// &lt;- Must have `return`</span></div><div class="line">    ctx.body = <span class="string">'success'</span>;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自訂 <code>middleware</code> 的時候也是如此</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.use((ctx, next) =&gt; &#123;</div><div class="line">  ctx.msg = <span class="string">'hello'</span>;</div><div class="line">  <span class="keyword">return</span> next(); <span class="comment">// &lt;- Must have `return`</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="1-0-與-2-0-版本問題"><a href="#1-0-與-2-0-版本問題" class="headerlink" title="1.0 與 2.0 版本問題"></a>1.0 與 2.0 版本問題</h2><p><a href="https://github.com/koajs/koa" target="_blank" rel="external">Koa.js</a> 的大部分 middleware 都已經開始支援 <a href="https://github.com/koajs/koa/tree/v2.x" target="_blank" rel="external">2.0</a>，鑑於是 alpha 的關係，要安裝這些元件時要加 <code>@next</code> 的 tag，尚未支援的在使用時可以安裝 <code>koa-convert</code> 來轉換。</p>
]]></content>
    
    <summary type="html">
    
      紀錄 Koa.js 的一些用法跟踩到的坑
    
    </summary>
    
    
      <category term="node.js" scheme="https://notes.knovour.ninja/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Sequelize 踩坑筆記</title>
    <link href="https://notes.knovour.ninja/2016/01/12/sequelize-notes/"/>
    <id>https://notes.knovour.ninja/2016/01/12/sequelize-notes/</id>
    <published>2016-01-12T15:44:32.000Z</published>
    <updated>2016-01-20T16:26:34.220Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><strong>範例以<a href="https://github.com/sequelize/express-example/tree/master/models" target="_blank" rel="external">這裡</a>為準（以下會換成 ES6 寫法），<a href="https://github.com/koajs/koa" target="_blank" rel="external">Koa</a> 用法亦同</strong></li>
<li><strong>異步程式碼寫法以 <a href="https://github.com/tj/co" target="_blank" rel="external">co</a> 這套件來簡化 Promise 寫法</strong></li>
</ol>
<h2 id="內建參數的位置"><a href="#內建參數的位置" class="headerlink" title="內建參數的位置"></a>內建參數的位置</h2><p><script src="https://gist.github.com/Knovour/387c0699bd427d12b013.js"></script><br><a id="more"></a></p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>我們在 <code>getFullName</code> 裡加上以下這段</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> co(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> user = <span class="keyword">yield</span> User.findOne();</div><div class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>getterMethods</code> 裡可以加入一個 <code>fullName</code> 的 function</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">getterMethods: &#123;</div><div class="line">  fullName() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;this.firstName&#125;</span> <span class="subst">$&#123;this.lastName&#125;</span>`</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這樣 <code>getFullName</code> 裡就可以直接寫 <code>user.fullName</code> 獲取全名了。</p>
<p>在外部使用時可以直接寫</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Models = <span class="built_in">require</span>(<span class="string">'/path/to/models'</span>);  <span class="comment">// 注意範例裡的 index.js 內容</span></div><div class="line"></div><div class="line">co(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> fullName = <span class="keyword">yield</span> Models.User.getFullName();</div><div class="line">  <span class="built_in">console</span>.log(fullName);</div><div class="line">&#125;).catch(<span class="built_in">console</span>.error);</div></pre></td></tr></table></figure>
<h3 id="使用其他-table"><a href="#使用其他-table" class="headerlink" title="使用其他 table"></a>使用其他 table</h3><p>假如我在 <code>User</code> 裡需要用到其他 table（假設叫 <code>Family</code>），我就可以寫 <code>sequelize.models.Family</code> 來呼叫。</p>
<h2 id="建立關聯（associate）"><a href="#建立關聯（associate）" class="headerlink" title="建立關聯（associate）"></a>建立關聯（associate）</h2><p>假設有個 table 叫 <code>Pet</code>，裡面有個 key 叫 <code>owner</code>，用以紀錄 <code>User</code> 的 id。</p>
<p>兩邊的關聯性程式如下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 寫在各自的 associate function 裡</span></div><div class="line"></div><div class="line"><span class="comment">// Pet</span></div><div class="line">Pet.belongsTo(models.User, &#123; foreignKey: <span class="string">'owner'</span> &#125;);</div><div class="line"></div><div class="line"><span class="comment">// User（owner 即為 Pet 裡的 key）</span></div><div class="line">User.hasMany(models.Pet, &#123; foreignKey: <span class="string">'owner'</span> &#125;);</div></pre></td></tr></table></figure>
<h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p>在查找的 json 中用 include 時，<code>hasMany</code> 與 <code>hasOne</code> 出來的 table 名稱會有單複數差異</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// hasMany</span></div><div class="line">&#123;</div><div class="line">  firstName: <span class="string">'XXXX'</span>,</div><div class="line">  Pets: [&#123;</div><div class="line">    ...</div><div class="line">  &#125;]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// hasOne</span></div><div class="line">&#123;</div><div class="line">  firstName: <span class="string">'XXXX'</span>,</div><div class="line">  Pet: &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3><p>要將 include 的資料進行 group 或 order 時，需要連帶寫上 table 名稱，例：<code>Pets.id</code>。</p>
]]></content>
    
    <summary type="html">
    
      紀錄 Sequelize 的一些用法跟踩到的坑
    
    </summary>
    
    
      <category term="node.js" scheme="https://notes.knovour.ninja/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>放棄在 OpenShift 上管理部落格</title>
    <link href="https://notes.knovour.ninja/2016/01/11/change-blog-from-openshift-to-github/"/>
    <id>https://notes.knovour.ninja/2016/01/11/change-blog-from-openshift-to-github/</id>
    <published>2016-01-11T15:40:12.000Z</published>
    <updated>2016-01-11T16:40:27.854Z</updated>
    
    <content type="html"><![CDATA[<p>去年決定將 Blog 從 <a href="http://logdown.com/" target="_blank" rel="external">Logdown</a> 換成自架 <a href="https://ghost.org/" target="_blank" rel="external">Ghost</a> 後，就想找一個線上空間來管理。但 <a href="https://www.linode.com/" target="_blank" rel="external">Linode</a> 或 <a href="https://www.digitalocean.com/" target="_blank" rel="external">Digital Ocean</a> 要從頭來覺得麻煩，而 <a href="https://heroku.com/" target="_blank" rel="external">Heroku</a> 不知道為何怎樣就是看不懂，後來看到 <a href="https://www.openshift.com/" target="_blank" rel="external">OpenShift</a> 設定似乎挺簡單，於是就辦來試試看。</p>
<p>無奈 <a href="https://www.openshift.com/" target="_blank" rel="external">OpenShift</a> 根本 Bug 滿天飛，社群的 <a href="https://ghost.org/" target="_blank" rel="external">Ghost</a> 架設速成 script 根本不能用就算了，連從官方的 Node.js 重頭架也常設定跑失敗，跑到最後居然是鎖我帳號？？更別說我在試用時三不五時被登出，不然就是怎麼按 Application 都沒顯示東西，也不知道怎麼回到我剛剛的設定頁面。<br><a id="more"></a><br>後來過了幾個月回去看又好了（<a href="https://heroku.com/" target="_blank" rel="external">Heroku</a> 這段期間我還是看不懂），但 <a href="https://ghost.org/" target="_blank" rel="external">Ghost</a> 速成 script 還是不能用，至少官方 Node 是可行的，於是就把 <a href="https://ghost.org/" target="_blank" rel="external">Ghost</a> 給弄起來了（中間在 Build 時還是爆掉幾次）。之後要把 <a href="https://ghost.org/" target="_blank" rel="external">Ghost</a> 給升級時，說要額外加 Gear（就是要收錢的意思），我就給他加了，反正一個月只有收大概幾塊錢。</p>
<p>最近幾個月，<a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s Encrypt</a> 開放後熱了起來，想說看能不能在自己的 Blog 弄上去，然後找到了<a href="https://blog.mobiushorizons.com/letsencrypt-ghost/" target="_blank" rel="external">這篇</a>文章，做到替換 <code>index.js</code> 來進行認證的階段怎樣就是失敗，後來又開了社群的 script 來試，結果居然可以跑了，而且替換 <code>index.js</code> 再認證的部份是 OK 的，雖然後面的步驟我沒做，但我也不想弄了。</p>
<p>這兩天把上面幾篇比較重要的文章搬到 <a href="https://github.com/" target="_blank" rel="external">Github</a>，改用 <a href="https://hexo.io/zh-tw/" target="_blank" rel="external">Hexo</a> 管理後，想把 <a href="https://www.openshift.com/" target="_blank" rel="external">OpenShift</a> 上的砍掉重架當備份，無奈這次 script 又不能跑了，既然這樣也不強求了，隨他去吧，砍了帳號，別再收我錢就好。</p>
<p>現在 domain 改用 <a href="https://www.cloudflare.com/" target="_blank" rel="external">CloudFlare</a> 管理，免費方案也有 SSL，這樣搞還比較省事。</p>
]]></content>
    
    <summary type="html">
    
      抱怨一下 OpenShift 的使用感想
    
    </summary>
    
    
      <category term="openshift" scheme="https://notes.knovour.ninja/tags/openshift/"/>
    
      <category term="ghost" scheme="https://notes.knovour.ninja/tags/ghost/"/>
    
  </entry>
  
  <entry>
    <title>在 Linux 上執行 Path of Exile (PoE)</title>
    <link href="https://notes.knovour.ninja/2015/09/16/path-of-exile-on-linux/"/>
    <id>https://notes.knovour.ninja/2015/09/16/path-of-exile-on-linux/</id>
    <published>2015-09-16T13:26:00.000Z</published>
    <updated>2016-03-21T13:20:24.649Z</updated>
    
    <content type="html"><![CDATA[<p>之前在 Wine 上跑過一陣子 PoE，但經過幾次更新後，loading 畫面除了狂閃外基本上就是完全進不去的狀態，然而當時也是有點膩了，所以也懶得折騰（基本上都是在講把 Wine 降級或是裝 PlayOnLinux，不過不想這樣搞）。</p>
<p>現在 2.0 出了，「據說」修好了錯位，也偶然發現有一篇比較不那麼麻煩的設定<a href="https://russell.cc/path-of-exile-linux/" target="_blank" rel="external">文章</a>，試一試還真的成功了，在這邊紀錄一下。<br><a id="more"></a><br>註：文章裡似乎是把 PoE 另外裝其他地方，再外帶參數啟動（我的理解啦），但我沒有用 Wine 模擬其他東西的需要，所以就把覺得可以跳過的部份跳過，下面的紀錄基本上就是個精簡後的設定步驟。</p>
<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul>
<li><a href="https://manjaro.github.io/" target="_blank" rel="external">Manjaro Linux</a></li>
<li><a href="https://www.kde.org/" target="_blank" rel="external">KDE Plasma 5</a></li>
<li>NVIDIA 顯卡</li>
</ul>
<h2 id="執行-winecfg"><a href="#執行-winecfg" class="headerlink" title="執行 winecfg"></a>執行 winecfg</h2><ol>
<li>選定 windows 版本（原文是 8 不過選 10 也沒差）。</li>
<li>將 <code>openal32</code> 加進函式庫裡。</li>
<li>勾選虛擬桌面，解析度自己根據需求調整。</li>
</ol>
<p><img src="https://farm1.staticflickr.com/577/21195623851_4c22a1dc13_b.jpg" alt="winecfg"></p>
<h2 id="安裝-windows-相關套件"><a href="#安裝-windows-相關套件" class="headerlink" title="安裝 windows 相關套件"></a>安裝 windows 相關套件</h2><p>執行 <code>winetricks directx9 vcrun2010 riched20 usp10</code></p>
<h2 id="安裝遊戲"><a href="#安裝遊戲" class="headerlink" title="安裝遊戲"></a>安裝遊戲</h2><p>執行 PoE 安裝檔，之後再開啟下載主程式，這部份不會有問題，但主程式裝完後先關掉不要按 Launch，不然 wine 會當掉。</p>
<h2 id="執行-wine-regedit"><a href="#執行-wine-regedit" class="headerlink" title="執行 wine regedit"></a>執行 <code>wine regedit</code></h2><p>安裝期間可以先處理這部份（在 regedit 裡移到對應的路徑）</p>
<ol>
<li><code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes</code>：新增一個字串值叫 <code>Fontin SmallCaps</code>，數值為 <code>Fontin</code>。</li>
<li><code>HKEY_CURRENT_USER\Software\Wine\Direct3D</code>：若沒有 <code>Direct3D</code> 的資料夾則自行新增一個。在底下新增以下資料：<ol>
<li><code>OffscreenRenderingMode</code>：字串值為 <code>backbuffer</code>。</li>
<li><code>VideoMemorySize</code>：這是你的顯卡記憶體大小，以 MB 計，我的是 2048。</li>
<li><code>UseGLSL</code>：NVIDIA 顯卡限定，值為 <code>disabled</code>，若執行時覺得有問題可以把這個值移除看看。</li>
</ol>
</li>
</ol>
<p><img src="https://farm1.staticflickr.com/738/20999863178_1337f3d5a8_b.jpg" alt="regedit"></p>
<h2 id="設定-PoE"><a href="#設定-PoE" class="headerlink" title="設定 PoE"></a>設定 PoE</h2><p>到 <code>~/文件/My Games/Path of Exile/</code>（不同發行版位置可能不大一樣），開啟 <code>production_Config.ini</code>，在 <code>[DISPLAY]</code> 底下新增或替換以下設定：</p>
<ol>
<li><code>fullscreen=true</code></li>
<li><code>borderless_windowed_fullscreen=false</code></li>
<li><code>resolution_height=虛擬桌面高度</code></li>
<li><code>resolution_width=虛擬桌面寬度</code></li>
</ol>
<h2 id="結束"><a href="#結束" class="headerlink" title="結束"></a>結束</h2><p>等 PoE 主程式載完就可以啟動了。</p>
<p><img src="https://farm6.staticflickr.com/5805/21197789131_d983728162_o.jpg" alt="play"></p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><ol>
<li>基本上不會像以前那樣 FPS 掉很重了，但偶爾會破圖。</li>
<li>地圖亮度偏暗，地穴根本是黑的，使用冰系或雷系技能擊中或發動瞬間會照亮地圖（火焰反而沒法照亮…），招喚 Golem（2.0 新技能）可以永久照亮。</li>
<li>音效要在設定裡選擇 <code>Generic Software on out</code> 開頭的才有聲音。</li>
<li>只有 Act4 沒錯位就算了，Act123 + Map 的錯位感覺更嚴重了是怎樣，新增的 Map 也是一樣慘。</li>
</ol>
<h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><p><a href="https://russell.cc/path-of-exile-linux/" target="_blank" rel="external">Path of Exile on Linux</a></p>
]]></content>
    
    <summary type="html">
    
      用 Wine 執行 PoE，無須降級、免裝 PlayOnLinux。
    
    </summary>
    
    
      <category term="linux" scheme="https://notes.knovour.ninja/tags/linux/"/>
    
      <category term="wine" scheme="https://notes.knovour.ninja/tags/wine/"/>
    
      <category term="game" scheme="https://notes.knovour.ninja/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>用 PM2 部署 node server</title>
    <link href="https://notes.knovour.ninja/2015/08/13/deploy-node-js-by-pm2/"/>
    <id>https://notes.knovour.ninja/2015/08/13/deploy-node-js-by-pm2/</id>
    <published>2015-08-12T18:38:00.000Z</published>
    <updated>2016-01-11T15:48:49.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>首先先設定完<a href="https://notes.knovour.ninja/2015/07/17/deploy-node-js-by-shipit/">這篇文</a>的前置作業。</p>
<p><strong>部署與開發用的機器都要安裝 PM2</strong>：<code>sudo npm i pm2 -g</code></p>
<h2 id="部署設定"><a href="#部署設定" class="headerlink" title="部署設定"></a>部署設定</h2><p>於專案資料夾底下執行 <code>pm2 ecosystem</code> 生成 <code>ecosystem.json5</code>，修改副檔名為 json 檔以便顯示語法 hightlight。</p>
<p>將裡面的內容做修改</p>
<script src="https://gist.github.com/Knovour/f27c0cf743e991973f57.js"></script>

<p>注意最後一句裡 <code>pm2 startOrRestart ecosystem.json</code> 的副檔名是否相同。<br><a id="more"></a></p>
<h2 id="開始部署"><a href="#開始部署" class="headerlink" title="開始部署"></a>開始部署</h2><p>第一次部署時先執行 setup</p>
<p><code>pm2 deploy ecosystem.json production setup</code></p>
<p>成功後就可以正式部署了</p>
<p><code>pm2 deploy ecosystem.json production</code></p>
<p>之後專案更新時只要執行第二句即可。</p>
<p>一切順利的話 PM2 就會在 server 端開始執行了。</p>
<h2 id="額外指令"><a href="#額外指令" class="headerlink" title="額外指令"></a>額外指令</h2><p>開機啟動：<code>pm2 startup -u DEPLOY_SERVER_USER_ACCOUNT</code></p>
<p>不設 <code>-u</code>（user）的話，在開機時預設就會以 root 權限執行。</p>
<p>其他指令或設定請至 <a href="https://github.com/Unitech/pm2" target="_blank" rel="external">PM2</a> 檢視說明文件</p>
<h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><ul>
<li><a href="https://github.com/Unitech/pm2" target="_blank" rel="external">PM2</a></li>
<li><a href="https://github.com/Unitech/PM2/blob/master/ADVANCED_README.md" target="_blank" rel="external">PM2 Advance Readme</a></li>
<li><a href="http://www.toobug.net/article/using_pm2_deploy.html" target="_blank" rel="external">使用 PM2 Deploy 部署基于 Git 版本管理的网站应用</a></li>
<li><a href="https://www.gitbook.com/book/wohugb/pm2/details" target="_blank" rel="external">PM2 GitBook</a></li>
<li><a href="http://nicmitchell.com/2015/04/deploying-node-js-applications-with-pm2/" target="_blank" rel="external">Deploying Node.js Applications with PM2</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      用 PM2 進行 node.js server 佈署。
    
    </summary>
    
    
      <category term="node.js" scheme="https://notes.knovour.ninja/tags/node-js/"/>
    
      <category term="deploy" scheme="https://notes.knovour.ninja/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>用 Shipit 部署 node server</title>
    <link href="https://notes.knovour.ninja/2015/07/17/deploy-node-js-by-shipit/"/>
    <id>https://notes.knovour.ninja/2015/07/17/deploy-node-js-by-shipit/</id>
    <published>2015-07-17T15:42:00.000Z</published>
    <updated>2016-01-10T16:31:14.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p><strong>假設是全新的 Linux，帳號為 deploy</strong></p>
<ol>
<li>在 github 等託管服務中登錄 deploy server 的 ssh public key。</li>
<li>設定 ssh 免密碼遠端登入：在 <code>.ssh/authorized_keys</code> 裡貼上開發機的 ssh public key。</li>
<li>如有需要，將 server 裡的 global package 裝好，如 bower、sails、grunt-cli 等等。</li>
<li>設定 server 裡程式碼的存放位置，假設為 <code>/usr/src</code>。</li>
</ol>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /usr/src/<span class="keyword">my</span>-project-<span class="built_in">name</span></div><div class="line">chown deploy:deploy /usr/src/<span class="keyword">my</span>-project-<span class="built_in">name</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="在開發機安裝相關套件"><a href="#在開發機安裝相關套件" class="headerlink" title="在開發機安裝相關套件"></a>在開發機安裝相關套件</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo npm <span class="selector-tag">i</span> shipit-cli -g</div><div class="line">npm <span class="selector-tag">i</span> shipit-deploy shipit-npm --save-dev</div></pre></td></tr></table></figure>
<h2 id="ShipIt"><a href="#ShipIt" class="headerlink" title="ShipIt!"></a>ShipIt!</h2><p>在專案資料夾目錄產生 <code>shipitfile.js</code></p>
<p>內容如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">shipit</span>) </span>&#123;</div><div class="line">  <span class="built_in">require</span>(<span class="string">'shipit-deploy'</span>)(shipit);  <span class="comment">// remote deploy</span></div><div class="line">  <span class="built_in">require</span>(<span class="string">'shipit-npm'</span>)(shipit);      <span class="comment">// remote auto install npm packages</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> config = &#123;</div><div class="line">    <span class="keyword">default</span>: &#123;</div><div class="line">      workspace: <span class="string">'/tmp/project-name-in-deploy-server'</span>,</div><div class="line">      deployTo: <span class="string">'/usr/src/project-name-in-deploy-server'</span>,</div><div class="line">      repositoryUrl: <span class="string">'your git remote url (github, bitbucket, etc...)'</span>,</div><div class="line">      ignores: [<span class="string">'.git'</span>, <span class="string">'node_modules'</span>],</div><div class="line">      keepReleases: <span class="number">2</span>,</div><div class="line">    &#125;,</div><div class="line">    staging: &#123;</div><div class="line">      servers: <span class="string">'deploy@your-deploy-server-ip'</span></div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  shipit.initConfig(config);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>輸入 <code>shipit staging deploy</code> 開始部署</p>
<h2 id="額外命令"><a href="#額外命令" class="headerlink" title="額外命令"></a>額外命令</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">shipit.initConfig(config);</div><div class="line"><span class="comment">// code 加在這行之後</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> current = config.<span class="keyword">default</span>.deployTo + <span class="string">'/current'</span>;</div><div class="line"><span class="comment">// shipit 會將 source code 放在 deploy server 專案資料夾裡的 current 中</span></div><div class="line">shipit.task(<span class="string">'server-on'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> shipit.remote(<span class="string">'cd '</span> + current + <span class="string">' &amp;&amp; bower i &amp;&amp; npm start'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">shipit.task(<span class="string">'start'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">  shipit.start([<span class="string">'deploy'</span>, <span class="string">'server-on'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>執行 <code>shipit staging start</code></p>
<h2 id="基本設定的樣子"><a href="#基本設定的樣子" class="headerlink" title="基本設定的樣子"></a>基本設定的樣子</h2><script src="https://gist.github.com/Knovour/97760c466552c2ed12db.js"></script>



<h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><ul>
<li><a href="http://www.therightcode.net/deploy-nodejs-application-using-shipit/" target="_blank" rel="external">Forget Capistrano and deploy your node.js application using Shipit</a>（裡面是用 grunt 當範例，但我用 grunt 的方式跑不起來）</li>
<li><a href="https://github.com/shipitjs/shipit" target="_blank" rel="external">Shipit</a></li>
<li><a href="https://github.com/shipitjs/shipit-deploy" target="_blank" rel="external">shipit-deploy</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      用 Shipit 做簡單的 node.js server 佈署。
    
    </summary>
    
    
      <category term="node.js" scheme="https://notes.knovour.ninja/tags/node-js/"/>
    
      <category term="deploy" scheme="https://notes.knovour.ninja/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>記錄幾個 Google 搜尋技巧</title>
    <link href="https://notes.knovour.ninja/2015/04/15/some-google-search-skills/"/>
    <id>https://notes.knovour.ninja/2015/04/15/some-google-search-skills/</id>
    <published>2015-04-15T13:43:00.000Z</published>
    <updated>2016-03-21T13:25:06.558Z</updated>
    
    <content type="html"><![CDATA[<p>記錄幾個自己在搜尋時常用到的方式</p>
<h2 id="一般方式"><a href="#一般方式" class="headerlink" title="一般方式"></a>一般方式</h2><ul>
<li><code>-</code>：排除某個關鍵字。例：<code>ui -jquery</code></li>
<li><code>site:</code>：搜尋特定網站內容。例：<code>site:medium.com node.js</code></li>
<li><code>&quot;關鍵字&quot;</code>：限定搜尋結果包含引號內完整字串。</li>
</ul>
<h2 id="額外關鍵字"><a href="#額外關鍵字" class="headerlink" title="額外關鍵字"></a>額外關鍵字</h2><ul>
<li><code>alternative(s)</code>：搜尋某個軟體或 library 有沒有類似的東西。若搜尋的是 library 相關的，搜尋結果裡的 <a href="http://alternativeto.net/" target="_blank" rel="external">AlternativeTo</a> 網站則可以不用管，因為裡面舉的例子還是以軟體為主。</li>
<li><code>how (to)</code>：搜尋一些 server 或開發環境架設時會用到</li>
<li><code>附近</code>：搜尋 Map 時會用到。如：<code>101 附近 餐廳</code></li>
</ul>
<a id="more"></a>
<h2 id="一些特殊符號的英文"><a href="#一些特殊符號的英文" class="headerlink" title="一些特殊符號的英文"></a>一些特殊符號的英文</h2><p>主要是以前剛接觸 CSS3 跟 HTML 時會找的符號 (sign 或 symbol)</p>
<ul>
<li><code>&gt;</code>：greater than</li>
<li><code>~</code>：tilde</li>
<li><code>+</code>：plus</li>
<li><code>:</code>：colon</li>
<li><code>;</code>：semicolon</li>
<li><code>-</code>：dash、minus</li>
<li><code>_</code>：underline</li>
<li><code>,</code>：comma</li>
<li><code>.</code>：dot</li>
<li><code>•</code>：bullet point</li>
<li><code>·</code>：middot</li>
<li><code>$</code>：dollar</li>
<li><code>#</code>：number、pound (美式)</li>
</ul>
<h2 id="幾個-UI-相關元件的英文"><a href="#幾個-UI-相關元件的英文" class="headerlink" title="幾個 UI 相關元件的英文"></a>幾個 UI 相關元件的英文</h2><ul>
<li><code>hamburger menu</code>：就是本 blog 左上角那三條線。</li>
<li><code>ghost button</code>：只有 border 沒有 background-color 的按鈕。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      紀錄幾個自己在搜尋時常用到的方式（符號、關鍵字、某些符號的英文單字等）
    
    </summary>
    
    
      <category term="google" scheme="https://notes.knovour.ninja/tags/google/"/>
    
      <category term="search" scheme="https://notes.knovour.ninja/tags/search/"/>
    
  </entry>
  
</feed>
